{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/electron/",
    "result": {"data":{"site":{"siteMetadata":{"title":"동수의 로그북"}},"markdownRemark":{"id":"d95cf1e6-75de-50ba-b645-b04bbc84bd9f","excerpt":"Get Started Electron은 무엇인가요? Electron은 Javascript, HTML, CSS를 사용해서 desktop application을 만들 수 있는 Framework입니다. 과 를 포함함으로서, Electron은 Javascript 코드 베이스로 Window…","html":"<h2 id=\"get-started\" style=\"position:relative;\">Get Started<a href=\"#get-started\" aria-label=\"get started permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"electron은-무엇인가요\" style=\"position:relative;\">Electron은 무엇인가요?<a href=\"#electron%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"electron은 무엇인가요 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Electron은 Javascript, HTML, CSS를 사용해서 desktop application을 만들 수 있는 Framework입니다. <code class=\"language-text\">Chromium</code>과 <code class=\"language-text\">Node.js</code>를 포함함으로서, Electron은 Javascript 코드 베이스로 Window, macOS, Linux에서 동작시킬 수 있습니다. 특별한 개발 경험이 필요하지 않습니다.</p>\n<hr>\n<h3 id=\"quick-start\" style=\"position:relative;\">Quick Start<a href=\"#quick-start\" aria-label=\"quick start permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>여기서는 Electron으로 Hello World app을 만들 수 있습니다. 이 튜토리얼이 끝나면 앱은 실행 중인 Chromium, Node.js 및 Electron 버전에 대한 정보가 포함된 웹 페이지를 표시하는 브라우저 창을 엽니다.</p>\n<h4 id=\"설치\" style=\"position:relative;\">설치<a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> my-electron-app <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> my-electron-app\n<span class=\"token function\">npm</span> init</code></pre></div>\n<p><code class=\"language-text\">npm init</code> 은 몇가지의 fields를 설정해주어야 합니다. 이 튜토리얼을 진행하기 위해 따라야할 몇가지 사항이 있습니다.</p>\n<ul>\n<li>\n<p>entry point는 <code class=\"language-text\">main.js</code>여야 합니다.</p>\n</li>\n<li>\n<p>author, description는 어떤 값이든 상관없습니다. 다만 <code class=\"language-text\">app packaging</code>을 위해 꼭 필요합니다.</p>\n</li>\n</ul>\n<p>package.json을 다음과 같이 설정해주세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"scripts\"><pre class=\"language-scripts\"><code class=\"language-scripts\">{\n  &quot;name&quot;: &quot;my-electron-app&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;Hello World!&quot;,\n  &quot;main&quot;: &quot;main.js&quot;,\n  &quot;author&quot;: &quot;DongSu Lee&quot;,\n  &quot;license&quot;: &quot;MIT&quot;\n}</code></pre></div>\n<p>그 다음 <code class=\"language-text\">electron</code>을 <code class=\"language-text\">devDependencies</code>로 설치하세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev electron</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scripts\"><pre class=\"language-scripts\"><code class=\"language-scripts\">{\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;electron .&quot;\n  }\n}</code></pre></div>\n<p><code class=\"language-text\">npm run start</code>는 개발모드로 앱을 열어줄 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm start</code></pre></div>\n<blockquote>\n<p>참고: 이 스크립트는 Electron이 프로젝트의 루트 폴더에서 실행되도록 지시합니다. 이 단계에서 앱은 실행할 앱을 찾을 수 없다는 오류를 즉시 표시합니다.</p>\n</blockquote>\n<h4 id=\"run-the-main-process\" style=\"position:relative;\">Run the main process<a href=\"#run-the-main-process\" aria-label=\"run the main process permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>실행되는 동안 Electron은 package.json에 있는 <code class=\"language-text\">main</code> 필드를 찾습니다.</p>\n<p>electron application의 진입점은 <code class=\"language-text\">main.js</code>입니다. 이 스크립트는 <strong>main process</strong>를 컨트롤합니다. main process는 전체 Node.js 환경에서 실행되고 앱의 수명 주기를 제어하는 ​​주요 프로세스를 제어합니다.</p>\n<h4 id=\"브라우저창에서-web-page-열기\" style=\"position:relative;\">브라우저창에서 web page 열기<a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%B0%BD%EC%97%90%EC%84%9C-web-page-%EC%97%B4%EA%B8%B0\" aria-label=\"브라우저창에서 web page 열기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>자 이제 main.js를 만들었으니 우리는 2가지의 Electron module이 필요합니다.</p>\n<ul>\n<li>\n<p>app module (app의 이벤트 라이브사이클을 컨트롤합니다.)</p>\n</li>\n<li>\n<p>BrowserWindow module (app의 windows를 생성하고 관리합니다.)</p>\n</li>\n</ul>\n<p>main process가 node.js 런타임환경이니 <code class=\"language-text\">CommonJS</code> 모듈을 import 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> app<span class=\"token punctuation\">,</span> BrowserWindow <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그런 다음 index.html을 새 BrowserWindow 인스턴스에 로드하는 createWindow() 함수를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createWindow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  win<span class=\"token punctuation\">.</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그 다음 createWindow 함수를 호출하세요.</p>\n<p>Electron에서는 app 모듈이 <code class=\"language-text\">ready</code> 이벤트가 fired 된 후에 browser windows가 생성됩니다. 그래서 다음과 같이 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"윈도우-라이프사이클-관리하기\" style=\"position:relative;\">윈도우 라이프사이클 관리하기<a href=\"#%EC%9C%88%EB%8F%84%EC%9A%B0-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"윈도우 라이프사이클 관리하기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>이제 앱을 열 수 있게 되었지만, 운영체제 별로 좀 더 native한 느낌을 주기 위해 추가적인 boilerPlate code가 필요합니다. Application windows는 각각의 OS별로 다르게 움직입니다.</p>\n<h5 id=\"window--linux\" style=\"position:relative;\">Window &#x26; Linux<a href=\"#window--linux\" aria-label=\"window  linux permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>Windows 및 Linux에서 모든 창을 종료하면 일반적으로 응용 프로그램이 완전히 종료됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"window-all-closed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>platform <span class=\"token operator\">!==</span> <span class=\"token string\">\"darwin\"</span><span class=\"token punctuation\">)</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"macos\" style=\"position:relative;\">macOS<a href=\"#macos\" aria-label=\"macos permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>Linux 및 Windows 앱은 창이 열려 있지 않으면 종료되지만 macOS 앱은 일반적으로 창이 열리지 않아도 계속 실행되며 사용 가능한 창이 없을 때 앱을 활성화하면 새 창이 열립니다.</p>\n<p>이 기능을 구현하려면 app 모듈의 activate event를 수신하고 브라우저 창이 열려 있지 않으면 기존 createWindow() 메서드를 호출합니다.</p>\n<p>Electron app은 ready 이벤트 전에 창을 만들 수 없으므로 앱이 initialized된 후에만 activate 이벤트를 수신 대기해야 합니다. 기존 whenReady() 콜백 내에서 이벤트 리스너를 연결하여 이를 수행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"activate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BrowserWindow<span class=\"token punctuation\">.</span><span class=\"token function\">getAllWindows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"preload-script를-사용하여-nodejs에-access하기\" style=\"position:relative;\">preload script를 사용하여 Node.js에 access하기<a href=\"#preload-script%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-nodejs%EC%97%90-access%ED%95%98%EA%B8%B0\" aria-label=\"preload script를 사용하여 nodejs에 access하기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>우리가 해야할 일은 Electron의 version과 devDependencies를 웹페이지에 출력하는 것입니다.</p>\n<p>이런 정보에 접근하기 위해서 사실 main process에 작업을 하는것이 간단합니다. 하지만 main process에서는 <code class=\"language-text\">renderer's document context</code>에 접근할 수 없기 때문에 DOM을 수정할 수 없습니다.</p>\n<p>여기서 <strong>preload script</strong>를 renderer에 미리 붙이면 편리합니다. preload script는 renderer process가 실행되기 전에 실행되며, renderer globals (window, document) 와 Node.js환경 모두에 접근 할 수 있습니다.</p>\n<p><code class=\"language-text\">preload.js</code>를 아래와 같이 생성하세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">replaceText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">,</span> text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> element<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> text\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> dependency <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"chrome\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"electron\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">replaceText</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dependency<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-version</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">[</span>dependency<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>❗️ 이 스크립트를 renderer process에 연결하려면, BrowserWindow 생성자의 webPreferences.preload 옵션에 전달하세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// include the Node.js 'path' module at the top of your file</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// modify your existing createWindow() function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createWindow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">webPreferences</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">preload</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"preload.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  win<span class=\"token punctuation\">.</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<h4 id=\"보너스-추가적인-web-contents-추가하기\" style=\"position:relative;\">보너스: 추가적인 web contents 추가하기<a href=\"#%EB%B3%B4%EB%84%88%EC%8A%A4-%EC%B6%94%EA%B0%80%EC%A0%81%EC%9D%B8-web-contents-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"보너스 추가적인 web contents 추가하기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>이 시점에서 어떻게 추가적인 기능을 넣을 수 있을지 궁금하실겁니다!</p>\n<p>더 많은 콘텐츠를 위해, scripts를 renderer process에 추가 할 수 있습니다. renderer은 normal web 환경에서 돌아가기 때문에 <code class=\"language-text\">&lt;script> tag</code> 를 index.html의 </body> tag 앞에 추가할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./renderer.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>renderer.js에 포함된 코드는 같은 Javascript API과 프론트엔드에서 사용하는 전형적인 개발 도구에서 사용가능합니다.</p>\n<h4 id=\"요약\" style=\"position:relative;\">요약<a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>\n<p>앱을 컨트롤하고 Node.js 환경에서 돌아가는 main process를 main.js에 script를 생성했습니다.</p>\n</li>\n<li>\n<p>main.js에서 브라우저 창을 생성하고 웹 컨텐츠를 보여주기 위해 Electron의 <code class=\"language-text\">app</code>과 <code class=\"language-text\">BrowserWindow</code> 모듈을 사용했습니다.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"튜토리얼\" style=\"position:relative;\">튜토리얼<a href=\"#%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC\" aria-label=\"튜토리얼 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"전제조건-prerequisites\" style=\"position:relative;\">전제조건 (Prerequisites)<a href=\"#%EC%A0%84%EC%A0%9C%EC%A1%B0%EA%B1%B4-prerequisites\" aria-label=\"전제조건 prerequisites permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Electron은 HTML, CSS, Javascript를 사용해 desktop application을 만들기 위한 프레임워크 입니다. <code class=\"language-text\"> Chromium</code> 과 <code class=\"language-text\">Node.js</code>을 single binary file에 추가함으로써, Electron은 Javascript 코드 베이스로 Windows, macOS, Linux에서 동작하는 cross-platform apps를 만들 수 있게 해줍니다.</p>\n<p>이번 튜토리얼에서는 Electron을 사용해 desktop application을 개발하는 과정을 가이드합니다.</p>\n<h4 id=\"가정\" style=\"position:relative;\">가정<a href=\"#%EA%B0%80%EC%A0%95\" aria-label=\"가정 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Electron은 Web apps을 위한 기본 wrapper layer이며 Node.js 환경에서 실행됩니다. 따라서 이번 튜토리얼에서는 일반적으로 Node 및 프런트 엔드 웹 개발 기본 사항에 익숙하다고 가정합니다.</p>\n<h3 id=\"앱-만들기-building-your-first-app\" style=\"position:relative;\">앱 만들기 (Building your First App)<a href=\"#%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-building-your-first-app\" aria-label=\"앱 만들기 building your first app permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>내용은 위에 <a href=\"#quick-start\">Quick Start</a>와 동일함.</li>\n</ul>\n<h4 id=\"요약-1\" style=\"position:relative;\">요약<a href=\"#%EC%9A%94%EC%95%BD-1\" aria-label=\"요약 1 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>\n<p>Electron 애플리케이션은 npm 패키지를 사용하여 설정됩니다. Electron 실행 파일은 프로젝트의 devDependencies에 설치되어야 하며 package.json 파일의 스크립트를 사용하여 개발 모드에서 실행할 수 있습니다.</p>\n</li>\n<li>\n<p>앱은 package.json에 <code class=\"language-text\">main</code> property를 찾아 진입하며, 이 파일은 Node.js의 인스턴스를 실행하고 앱의 수명 주기, 기본 인터페이스 표시, 권한 있는 작업 수행, renderer process 관리를 담당하는 Electron의 <strong>main process</strong>를 컨트롤합니다.</p>\n</li>\n<li>\n<p>Renderer process는 그래픽 콘텐츠 표시를 담당합니다. 웹 주소나 로컬 HTML 파일을 가리키도록 하여 웹 페이지를 렌더러에 로드할 수 있습니다. renderer는 일반 웹 페이지와 매우 유사하게 작동하며 동일한 웹 API에 액세스할 수 있습니다.</p>\n</li>\n<li>\n<p>다음 섹션에서는 privileged API로 renderer process를 컨트롤 하는 방법과 프로세스 간에 통신하는 방법을 배웁니다.</p>\n</li>\n</ul>\n<h3 id=\"preload-script-활용하기-using-preload-scripts\" style=\"position:relative;\">Preload script 활용하기 (Using Preload Scripts)<a href=\"#preload-script-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-using-preload-scripts\" aria-label=\"preload script 활용하기 using preload scripts permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h4 id=\"목표\" style=\"position:relative;\">목표<a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>이번장에서는 preload script는 무엇인지, renderer process에서 privileged API를 어떻게 안전하게 사용할 수 있는지에 대해 학습합니다. 또한 main process와 renderer process 사이에서 어떻게 통신하는지에 대해서 배울 수 있습니다.</p>\n<h4 id=\"preload-script는-무엇인가요\" style=\"position:relative;\">preload script는 무엇인가요?<a href=\"#preload-script%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"preload script는 무엇인가요 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Electron의 main process는 전체 운영 체제 액세스 권한이 있는 Node.js 환경입니다. Electron 모듈 외에도 Node.js 내장 기능과 npm을 통해 설치된 모든 패키지에 액세스할 수 있습니다. 반면에 renderer process는 웹 페이지를 실행하며 보안상의 이유로 기본적으로 Node.js를 실행하지 않습니다.</p>\n<p>서로 다른 프로세스 유형을 연결하려면 <strong>preload</strong> 라는 special script를 사용해야 합니다.</p>\n<h4 id=\"preload-script를-통한-renderer-확장\" style=\"position:relative;\">preload script를 통한 renderer 확장<a href=\"#preload-script%EB%A5%BC-%ED%86%B5%ED%95%9C-renderer-%ED%99%95%EC%9E%A5\" aria-label=\"preload script를 통한 renderer 확장 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>BrowserWindow의 preload script는 HTML DOM과 Node.js 및 Electron API의 제한된 하위 집합에 모두 액세스할 수 있는 컨텍스트에서 실행됩니다.</p>\n<p>preload script는 웹 페이지가 renderer에 로드되기 전에 주입됩니다. 필요한 기능을 renderer에 추가하려면 contextBridge API를 통해 전역 객체를 정의할 수 있습니다.</p>\n<p>이 개념을 시연하기 위해 앱의 Chrome, Node 및 Electron 버전을 renderer에 노출하는 preload script를 만듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// preload.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> contextBridge <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span>\n\ncontextBridge<span class=\"token punctuation\">.</span><span class=\"token function\">exposeInMainWorld</span><span class=\"token punctuation\">(</span><span class=\"token string\">'versions'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">node</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> process<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">chrome</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> process<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">.</span>chrome<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">electron</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> process<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">.</span>electron<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// we can also expose variables, not just functions</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>preload script를 renderer process에 연결하려면 해당 경로를 BrowserWindow 생성자의 webPreferences.preload 옵션에 전달하세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// main.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> app<span class=\"token punctuation\">,</span> BrowserWindow <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createWindow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">webPreferences</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">preload</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'preload.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  win<span class=\"token punctuation\">.</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 시점에서 renderer는 versions global에 접근할 수 있으므로, 이 정보를 window에 띄워보겠습니다.\nrenderer.js를 생성하고 아래와 같이 작성하세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// renderer.js</span>\n\n<span class=\"token keyword\">const</span> information <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span>\ninformation<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">This app is using Chrome (v</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>versions<span class=\"token punctuation\">.</span><span class=\"token function\">chrome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">), Node.js (v</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>versions<span class=\"token punctuation\">.</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">), and Electron (v</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>versions<span class=\"token punctuation\">.</span><span class=\"token function\">electron</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>html에 renderer.js script를 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span>\n      <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Security-Policy<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>default-src <span class=\"token punctuation\">'</span>self<span class=\"token punctuation\">'</span>; script-src <span class=\"token punctuation\">'</span>self<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span>\n      <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-Content-Security-Policy<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>default-src <span class=\"token punctuation\">'</span>self<span class=\"token punctuation\">'</span>; script-src <span class=\"token punctuation\">'</span>self<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Hello from Electron renderer!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello from Electron renderer!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>👋<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./renderer.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<img width=\"600\" alt=\"스크린샷 2022-10-13 오전 10 45 02\" src=\"https://user-images.githubusercontent.com/87749134/195479488-0044412b-faad-4140-9547-515b0fbcdd63.png\">\n<h4 id=\"프로세스간-통신\" style=\"position:relative;\">프로세스간 통신<a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B0%84-%ED%86%B5%EC%8B%A0\" aria-label=\"프로세스간 통신 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>위에서 언급했다 싶이, main과 renderer process는 전혀 다른 환경을 가지고 있습니다. 그래서 renderer process에서 Node.js APIs에 바로 접근하는건 불가능할 뿐만 아니라 HTML DOM 에서 main process로 접근도 불가능 하죠.</p>\n<p>이런 문제를 해결하기 위해서 Electron의 <code class=\"language-text\">ipcMain</code> 과 <code class=\"language-text\">ipcRenderer</code> \b모듈을 사용하는 것입니다. 우리의 웹페이지에서 main process로 메세지를 보내기 위해, <code class=\"language-text\">ipcMain.handle</code> 이라는 main process handler를 설정할 수 있습니다. 그리고 <code class=\"language-text\">ipcRender.invoke</code> 를 preload.js에서 호출하면 됩니다.</p>\n<p>우선, main process에서 renderer에 string을 return 하는 <code class=\"language-text\">ping()</code> 이라는 전역 함수를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// preload.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> contextBridge<span class=\"token punctuation\">,</span> ipcRenderer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span>\n\ncontextBridge<span class=\"token punctuation\">.</span><span class=\"token function\">exposeInMainWorld</span><span class=\"token punctuation\">(</span><span class=\"token string\">'versions'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">node</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> process<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">chrome</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> process<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">.</span>chrome<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">electron</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> process<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">.</span>electron<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">ping</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ipcRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// we can also expose variables, not just functions</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그런 다음 main process에서 handle listener를 설정합니다. HTML 파일을 load하기 전에 이 작업을 수행하여 renderer에서 호출을 보내기 전에 처리기가 준비되었음을 보장합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ipcMain <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createWindow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">webPreferences</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">preload</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'preload.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  ipcMain<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span>\n  win<span class=\"token punctuation\">.</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>sender와 receiver를 설정했으면 이제 정의한 ‘ping’ 채널을 통해 renderer에서 main process로 메시지를 보낼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints out 'pong'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h3 id=\"기능-추가하기-adding-features\" style=\"position:relative;\">기능 추가하기 (Adding Features)<a href=\"#%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0-adding-features\" aria-label=\"기능 추가하기 adding features permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#get-started\">Get Started</a></p>\n<ul>\n<li>\n<p><a href=\"#electron%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\">Electron은 무엇인가요?</a></p>\n</li>\n<li>\n<p><a href=\"#quick-start\">Quick Start</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%84%A4%EC%B9%98\">설치</a></p>\n</li>\n<li>\n<p><a href=\"#run-the-main-process\">Run the main process</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%B0%BD%EC%97%90%EC%84%9C-web-page-%EC%97%B4%EA%B8%B0\">브라우저창에서 web page 열기</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9C%88%EB%8F%84%EC%9A%B0-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\">윈도우 라이프사이클 관리하기</a></p>\n<ul>\n<li><a href=\"#window--linux\">Window &#x26; Linux</a></li>\n<li><a href=\"#macos\">macOS</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#preload-script%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-nodejs%EC%97%90-access%ED%95%98%EA%B8%B0\">preload script를 사용하여 Node.js에 access하기</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B3%B4%EB%84%88%EC%8A%A4-%EC%B6%94%EA%B0%80%EC%A0%81%EC%9D%B8-web-contents-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">보너스: 추가적인 web contents 추가하기</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC\">튜토리얼</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%A0%84%EC%A0%9C%EC%A1%B0%EA%B1%B4-prerequisites\">전제조건 (Prerequisites)</a></p>\n<ul>\n<li><a href=\"#%EA%B0%80%EC%A0%95\">가정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-building-your-first-app\">앱 만들기 (Building your First App)</a></p>\n<ul>\n<li><a href=\"#%EC%9A%94%EC%95%BD-1\">요약</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#preload-script-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-using-preload-scripts\">Preload script 활용하기 (Using Preload Scripts)</a></p>\n<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">목표</a></li>\n<li><a href=\"#preload-script%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\">preload script는 무엇인가요?</a></li>\n<li><a href=\"#preload-script%EB%A5%BC-%ED%86%B5%ED%95%9C-renderer-%ED%99%95%EC%9E%A5\">preload script를 통한 renderer 확장</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B0%84-%ED%86%B5%EC%8B%A0\">프로세스간 통신</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0-adding-features\">기능 추가하기 (Adding Features)</a></p>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Electron 공식문서 뿌시기🗿","date":"September 27, 2022","description":"Electron 공식문서를 읽고 내용을 정리합니다."}},"previous":{"fields":{"slug":"/execution-context/"},"frontmatter":{"title":"실행 컨텍스트와 javascript 동작원리에 대한 이해. (feat.호이스팅)"}},"next":{"fields":{"slug":"/next/"},"frontmatter":{"title":"Next.js 공식문서 뿌시기🗿 (till 12 version)"}}},"pageContext":{"id":"d95cf1e6-75de-50ba-b645-b04bbc84bd9f","previousPostId":"66a77070-1a51-5e7e-8486-f2b426953fc7","nextPostId":"24f9d210-5373-5eeb-b104-d4eb338bb8af"}},
    "staticQueryHashes": ["230163734","3589320610"]}