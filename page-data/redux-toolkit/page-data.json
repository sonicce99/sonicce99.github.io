{"componentChunkName":"component---src-templates-blog-post-js","path":"/redux-toolkit/","result":{"data":{"site":{"siteMetadata":{"title":"동수의 로그북"}},"markdownRemark":{"id":"7250f432-4968-51f3-9519-919810b9487b","excerpt":"Usage Guide Redux Toolkit의 목표는 일반적인 Redux 사용 사례를 단순화하는 것입니다. Redux로 수행할 수 있는 모든 작업을 위한 완벽한 솔루션은 아니지만 훨씬 간단하게 작성할 수 있습니다. Redux Toolkit…","html":"<h2 id=\"usage-guide\" style=\"position:relative;\">Usage Guide<a href=\"#usage-guide\" aria-label=\"usage guide permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Redux Toolkit의 목표는 일반적인 Redux 사용 사례를 단순화하는 것입니다.</p>\n<p>Redux로 수행할 수 있는 모든 작업을 위한 완벽한 솔루션은 아니지만 훨씬 간단하게 작성할 수 있습니다.</p>\n<p>Redux Toolkit은 애플리케이션에서 사용할 수 있는 여러 개별 기능을 exports하고, Redux-Thunk와 같이 Redux와 함께 일반적으로 사용되는 일부 다른 패키지에 대한 종속성을 추가합니다.</p>\n<p>이를 통해 새로운 프로젝트이든, 기존의 대규모 앱을 업데이트하든 관계없이 자신의 애플리케이션에서 사용하는 방법을 결정할 수 있습니다.</p>\n<h3 id=\"store-setup\" style=\"position:relative;\">Store Setup<a href=\"#store-setup\" aria-label=\"store setup permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>모든 Redux 앱은 Store를 생성해야 합니다. 여기에는 일반적으로 여러 단계가 포함됩니다.</p>\n<ul>\n<li>\n<p>root reducer 함수 import or creating.</p>\n</li>\n<li>\n<p>미들웨어 설정 (예를 들어, 비동기 로직을 ​​처리하기 위한 미들웨어).</p>\n</li>\n<li>\n<p>Redux DevTools Extension 구성.</p>\n</li>\n<li>\n<p>development인지 production 인지에 따라 일부 logic을 변경할 수 있음.</p>\n</li>\n</ul>\n<h4 id=\"manual-store-setup\" style=\"position:relative;\">Manual Store Setup<a href=\"#manual-store-setup\" aria-label=\"manual store setup permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> applyMiddleware<span class=\"token punctuation\">,</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> composeWithDevTools <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-devtools-extension\"</span>\n<span class=\"token keyword\">import</span> thunkMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-thunk\"</span>\n\n<span class=\"token keyword\">import</span> monitorReducersEnhancer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./enhancers/monitorReducers\"</span>\n<span class=\"token keyword\">import</span> loggerMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">\"./middleware/logger\"</span>\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./reducers\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">preloadedState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> middlewares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>loggerMiddleware<span class=\"token punctuation\">,</span> thunkMiddleware<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> middlewareEnhancer <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>middlewares<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> enhancers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>middlewareEnhancer<span class=\"token punctuation\">,</span> monitorReducersEnhancer<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> composedEnhancers <span class=\"token operator\">=</span> <span class=\"token function\">composeWithDevTools</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>enhancers<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">,</span> preloadedState<span class=\"token punctuation\">,</span> composedEnhancers<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"production\"</span> <span class=\"token operator\">&amp;&amp;</span> module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./reducers\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> store<span class=\"token punctuation\">.</span><span class=\"token function\">replaceReducer</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> store\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 예는 읽을 수 있지만 프로세스가 항상 간단하지는 않습니다.</p>\n<ul>\n<li>\n<p>createStore 함수는 rootReducer, preloadedState, enhancer를 인수로 받습니다.</p>\n</li>\n<li>\n<p>middleware 및 enhancers를 설정하는 프로세스는 혼란스러울 수 있습니다. 특히 여러 구성 요소를 추가하려는 경우에는 더욱 그렇습니다.</p>\n</li>\n<li>\n<p>Redux DevTools Extension 문서는 처음에 확장이 사용 가능한지 확인하기 위해 global namespace를 확인하는 손으로 쓴 코드를 사용할 것을 제안합니다. 많은 사용자가 이러한 스니펫을 복사하여 붙여넣기 때문에 설정 코드를 읽기가 더 어려워집니다.</p>\n</li>\n</ul>\n<h4 id=\"simplifying-store-setup-with-configurestore\" style=\"position:relative;\">Simplifying Store Setup with configureStore<a href=\"#simplifying-store-setup-with-configurestore\" aria-label=\"simplifying store setup with configurestore permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>configureStore 는 이러한 이슈를 다음과 같이 돕습니다.</p>\n<ul>\n<li>\n<p>더 쉽게 읽을 수 있는 naming된 parameters가 있는 옵션 개체가 있음</p>\n</li>\n<li>\n<p>스토어에 추가하려는 middleware 및 enhancers array를 제공하고 자동으로 <code class=\"language-text\">applyMiddleware</code> 를 호출 및 작성합니다.</p>\n</li>\n<li>\n<p>Redux DevTools Extension을 자동으로 활성화</p>\n</li>\n</ul>\n<p>또한 configureStore는 기본적으로 아래의 미들웨어를 추가합니다.</p>\n<ul>\n<li>\n<p>redux-thunk: 구성 요소 외부에서 동기 및 비동기 로직을 ​​모두 사용하는 데 가장 일반적으로 사용되는 미들웨어입니다.</p>\n</li>\n<li>\n<p>development 단계에서 middleware는 상태를 변경하거나 직렬화할 수 없는 값을 사용하는 것과 같은 일반적인 실수를 확인합니다.</p>\n</li>\n</ul>\n<p>이를 사용하는 가장 간단한 방법은 root reducer 함수를 reducer라는 parameter로 전달하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token keyword\">import</span> usersReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./usersReducer\"</span>\n<span class=\"token keyword\">import</span> postsReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./postsReducer\"</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> usersReducer<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> postsReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store</code></pre></div>\n<p>이것은 one level의 reducers에서만 작동합니다. reducers를 중첩하려면 <code class=\"language-text\">CombineReducers</code>를 직접 호출해야 합니다.</p>\n<p>store 설정을 customize 해야 하는 경우 추가 옵션을 전달할 수 있습니다.</p>\n<p>Redux Toolkit을 사용한 hot reloading 예제는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n\n<span class=\"token keyword\">import</span> monitorReducersEnhancer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./enhancers/monitorReducers\"</span>\n<span class=\"token keyword\">import</span> loggerMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">\"./middleware/logger\"</span>\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./reducers\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configureAppStore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">preloadedState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> rootReducer<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">middleware</span><span class=\"token operator\">:</span> <span class=\"token parameter\">getDefaultMiddleware</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">getDefaultMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>loggerMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    preloadedState<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">enhancers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>monitorReducersEnhancer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"production\"</span> <span class=\"token operator\">&amp;&amp;</span> module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./reducers\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> store<span class=\"token punctuation\">.</span><span class=\"token function\">replaceReducer</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> store\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">middleware</code> argument를 제공하면 configureStore는 나열된 모든 미들웨어만 사용합니다. 만약 custom 미들웨어와 defaults를 모두 함께 사용하려면 callback 표기법을 사용하고 <code class=\"language-text\">getDefaultMiddleware</code>를 호출하고 반환하는 미들웨어 배열에 결과를 포함할 수 있습니다.</p>\n<h3 id=\"writing-reducers\" style=\"position:relative;\">Writing Reducers<a href=\"#writing-reducers\" aria-label=\"writing reducers permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Reducers는 가장 중요한 Redux 개념입니다. 일반적인 Reducers 기능에는 다음이 필요합니다.</p>\n<ul>\n<li>\n<p>action의 <code class=\"language-text\">type</code> 필드를 보고 어떻게 respond해야 하는지 확인합니다.</p>\n</li>\n<li>\n<p>변경해야 하는 상태 부분의 복사본을 만들고 해당 복사본만 수정하여 상태를 불변으로 업데이트합니다.</p>\n</li>\n</ul>\n<p>Reducers를 작성할 때 어려운점은 <code class=\"language-text\">상태를 불변으로 업데이트</code>하는 것과 관련이 있습니다.</p>\n<p>JavaScript는 mutable한 언어이므로 중첩된 변경 불가능한 데이터를 수동으로 업데이트하는 것은 어렵고 실수하기 쉽습니다.</p>\n<p>다음은 <code class=\"language-text\">createReducer</code>를 사용하는 방법에 대한 몇 가지 예입니다.</p>\n<p>switch 문과 변경 불가능한 업데이트를 사용하는 일반적인 “todo list” reducer부터 시작하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">todosReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ADD_TODO\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"TOGGLE_TODO\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> index <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!==</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> todo\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span>todo<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"REMOVE_TODO\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i <span class=\"token operator\">!==</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우리는 특별히 state.concat()을 호출하여 새 todo 항목이 있는 복사된 배열을 반환하고, state.map()을 호출하여 토글 케이스에 대한 복사된 배열을 반환하고 spread 연산자를 사용하여 todo의 복사본을 만듭니다.</p>\n<p><code class=\"language-text\">createReducer</code>를 사용하면 해당 예제를 상당히 단축할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> todosReducer <span class=\"token operator\">=</span> <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">builder</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  builder\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ADD_TODO\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// \"mutate\" the array by calling push()</span>\n      state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOGGLE_TODO\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span>\n      <span class=\"token comment\">// \"mutate\" the object by overwriting a field</span>\n      todo<span class=\"token punctuation\">.</span>completed <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>todo<span class=\"token punctuation\">.</span>completed\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"REMOVE_TODO\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Can still return an immutably-updated value if we want to</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i <span class=\"token operator\">!==</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"considerations-for-using-createreducer\" style=\"position:relative;\">Considerations for Using createReducer<a href=\"#considerations-for-using-createreducer\" aria-label=\"considerations for using createreducer permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Redux Toolkit createReducer 함수가 정말 유용할 수 있지만 다음 사항을 명심하세요.</p>\n<ul>\n<li>\n<p>“mutative” 코드는 createReducer 함수 내에서만 올바르게 작동합니다.</p>\n</li>\n<li>\n<p>Immer는 기존의 상태를 “mutating”하는 것과 새로운 상태 값을 반환하는 것을 혼합하도록 허용하지 않습니다.</p>\n</li>\n</ul>\n<h3 id=\"writing-action-creators\" style=\"position:relative;\">Writing Action Creators<a href=\"#writing-action-creators\" aria-label=\"writing action creators permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Redux는 action object 생성 프로세스를 캡슐화하는 <code class=\"language-text\">action creator 함수</code>를 작성하기를 권장합니다.</p>\n<p>이것이 꼭 필요한 것은 아니지만 Redux 사용의 표준 부분입니다.</p>\n<p>대부분의 액션 생성자는 매우 간단합니다.</p>\n<p>parameters를 받아서 구체적인 <code class=\"language-text\">type</code> 필드와 parameters의 action object를 반환합니다. parameters는 일반적으로 <code class=\"language-text\">payload</code> 라는 필드에 넣습니다.</p>\n<p>일반적인 action creator는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ADD_TODO\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"defining-action-creators-with-createaction\" style=\"position:relative;\">Defining Action Creators with createAction<a href=\"#defining-action-creators-with-createaction\" aria-label=\"defining action creators with createaction permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">action creators</code>를 손으로 작성하는 것은 지루할 수 있습니다.</p>\n<p>Redux Toolkit은 주어진 action type을 사용하는 action creator를 생성하고 argument를 payload 필드로 바꾸는 createAction이라는 함수를 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> addTodo <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ADD_TODO\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Buy milk\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {type : \"ADD_TODO\", payload : {text : \"Buy milk\"}})</span></code></pre></div>\n<h4 id=\"using-action-creators-as-action-types\" style=\"position:relative;\">Using Action Creators as Action Types<a href=\"#using-action-creators-as-action-types\" aria-label=\"using action creators as action types permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Redux reducers는 상태를 업데이트하는 방법을 결정하기 위해 특정 action types을 찾아야 합니다.</p>\n<p>일반적으로 이것은 action type 문자열과 action creator 함수를 별도로 정의하여 수행됩니다.</p>\n<p>Redux Toolkit createAction 함수는 이를 더 쉽게 하기 위해 몇 가지 트릭을 사용합니다.</p>\n<ol>\n<li>\n<p>createAction은 자신이 생성하는 action creator에서 toString() 메서드를 재정의합니다. 즉, builder.addCase 또는 createReducer object 표기법에 제공된 key와 같은 일부 위치에서 action creator 자체를 “action type” 참조로 사용할 수 있습니다.</p>\n</li>\n<li>\n<p>action type도 action creator에서 type 필드로 정의됩니다.</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> actionCreator <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SOME_ACTION_TYPE\"</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>actionCreator<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"SOME_ACTION_TYPE\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>actionCreator<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"SOME_ACTION_TYPE\"</span>\n\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">builder</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// actionCreator.toString() will automatically be called here</span>\n  <span class=\"token comment\">// also, if you use TypeScript, the action type will be correctly inferred</span>\n  builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>actionCreator<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Or, you can reference the .type field:</span>\n  <span class=\"token comment\">// if using TypeScript, the action type cannot be inferred that way</span>\n  builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>actionCreator<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>즉, 별도의 변수를 작성하거나 사용할 필요가 없으며 <code class=\"language-text\">const SOME_ACTION_TYPE = \"SOME_ACTION_TYPE\"</code> 과 같은 작업 유형의 이름과 값을 반복할 필요가 없습니다.</p>\n<p>불행히도 문자열로의 암시적 변환은 switch 문에서 동작하지 않습니다.</p>\n<p>switch 문에서 이러한 action creator 중 하나를 사용하려면 actionCreator.toString()을 직접 호출해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> actionCreator <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SOME_ACTION_TYPE'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// ERROR: this won't work correctly!</span>\n ❌ <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">actionCreator</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// CORRECT: this will work as expected</span>\n    <span class=\"token keyword\">case</span> actionCreator<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// CORRECT: this will also work right</span>\n    <span class=\"token keyword\">case</span> actionCreator<span class=\"token punctuation\">.</span>type<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"creating-slices-of-state\" style=\"position:relative;\">Creating Slices of State<a href=\"#creating-slices-of-state\" aria-label=\"creating slices of state permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Redux state는 일반적으로 <code class=\"language-text\">combineReducers</code>에 전달되는 reducers에 의해 정의되는 “slices”로 구성됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span>\n<span class=\"token keyword\">import</span> usersReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./usersReducer\"</span>\n<span class=\"token keyword\">import</span> postsReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./postsReducer\"</span>\n\n<span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> usersReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> postsReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 예에서 users와 posts은 모두 “slice”로 간주됩니다.</p>\n<p>보통은 한 파일에서 slice의 reducer function을 정의하고 두 번째 파일에서 action creator를 정의하는 것입니다.</p>\n<p>두 함수 모두 같은 action type을 참조해야 하기 때문에 일반적으로 세 번째 파일에서 정의되고 두 파일에서 import 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// postsConstants.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">CREATE_POST</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE_POST\"</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">UPDATE_POST</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE_POST\"</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DELETE_POST</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"DELETE_POST\"</span>\n\n<span class=\"token comment\">// postsActions.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">CREATE_POST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">UPDATE_POST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DELETE_POST</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./postConstants\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addPost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">CREATE_POST</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// postsReducer.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">CREATE_POST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">UPDATE_POST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DELETE_POST</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./postConstants\"</span>\n\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">postsReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">CREATE_POST</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// omit implementation</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"defining-functions-in-objects\" style=\"position:relative;\">Defining Functions in Objects<a href=\"#defining-functions-in-objects\" aria-label=\"defining functions in objects permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>modern JavaScript에는 object의 key와 functions를 모두 정의하는 몇 가지 방법이 있으며 다양한 key 정의와 function 정의를 max and match 할 수 있습니다.</p>\n<p>예를 들어, 다음은 object 내부의 함수를 정의하는 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"ADD_TODO4\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> reducerObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Explicit quotes for the key name, arrow function for the reducer</span>\n    <span class=\"token string-property property\">\"ADD_TODO1\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Bare key with no quotes, function keyword</span>\n    <span class=\"token function-variable function\">ADD_TODO2</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Object literal function shorthand</span>\n    <span class=\"token constant\">ADD_TODO3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Computed property</span>\n    <span class=\"token punctuation\">[</span>keyName<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"simplifying-slices-with-createslice\" style=\"position:relative;\">Simplifying Slices with createSlice<a href=\"#simplifying-slices-with-createslice\" aria-label=\"simplifying slices with createslice permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>slice 만드는 작업을 단순화하기 위해 Redux Toolkit에는 reducers function의 이름을 기반으로 action type 및 action creator를 자동 생성하는 createSlice 함수가 포함되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> postsSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"posts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">updatePost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">deletePost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>postsSlice<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n콘솔 결과.\n{\n    name: 'posts',\n    actions : {\n        createPost,\n        updatePost,\n        deletePost,\n    },\n    reducer\n}\n*/</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPost <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> postsSlice<span class=\"token punctuation\">.</span>actions\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// type이 자동으로 생성됨.</span>\n<span class=\"token comment\">// {type : \"posts/createPost\", payload : {id : 123, title : \"Hello World\"}}</span></code></pre></div>\n<p>createSlice는 reducers 필드에 정의된 모든 function을 살펴보고 제공된 모든 함수에 대해 reducer의 이름을 action type 자체로 사용하는 action creator를 생성합니다. 그래서 createPost reducer는 “posts/createPost” action type이 되었고, createPost() action creator는 해당 type의 action을 반환할 것입니다.</p>\n<h4 id=\"exporting-and-using-slices\" style=\"position:relative;\">Exporting and Using Slices<a href=\"#exporting-and-using-slices\" aria-label=\"exporting and using slices permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>대부분의 경우 slice을 정의하고 해당 action creator와 reducer를 내보낼 것입니다. 권장되는 방법은 ES6 구조 분해 및 내보내기 구문을 사용하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> postsSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"posts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">updatePost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">deletePost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Extract the action creators object and the reducer</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> actions<span class=\"token punctuation\">,</span> reducer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> postsSlice\n<span class=\"token comment\">// Extract and export each action creator by name</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPost<span class=\"token punctuation\">,</span> updatePost<span class=\"token punctuation\">,</span> deletePost <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n<span class=\"token comment\">// Export the reducer, either as a default or named export</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> reducer</code></pre></div>\n<p>원하는 경우 slice object 자체를 직접 내보낼 수도 있습니다.</p>\n<p>이 방식으로 정의된 slice는 action creator와 reducer를 정의하고 내보내기 위한 “Redux Ducks” 패턴과 개념상 매우 유사합니다. 그러나 slice를 가져오고 내보낼 때 알아야 할 몇 가지 잠재적인 단점이 있습니다.</p>\n<ol>\n<li>\n<p>Redux action type은 하나의 slice에만 국한되지 않습니다. 개념적으로는 각 slice reducer는 Redux 상태의 자체 부분을 “소유”하지만 모든 action type을 듣고 적절하게 상태를 업데이트할 수 있어야 합니다. 예를 들어, 다른 slice가 데이터를 지우거나 초기 상태 값으로 다시 재설정하여 “사용자 로그아웃” 작업에 응답하려고 할 수 있습니다. 이 점을 염두하면서 slice들을 설계해야합니다.</p>\n</li>\n<li>\n<p>두 모듈이 서로 가져오려고 하면 JS 모듈에 “circular reference” 문제가 발생할 수 있습니다. 이로 인해 가져오기가 정의되지 않아 해당 가져오기가 필요한 코드가 손상될 수 있습니다. 두 개의 서로 다른 파일에 정의된 slice가 모두 다른 파일에 정의된 action에 응답하려는 경우 이 문제가 발생할 수 있습니다.</p>\n</li>\n</ol>\n<h3 id=\"asynchronous-logic-and-data-fetching\" style=\"position:relative;\">Asynchronous Logic and Data Fetching<a href=\"#asynchronous-logic-and-data-fetching\" aria-label=\"asynchronous logic and data fetching permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h4 id=\"using-middleware-to-enable-async-logic\" style=\"position:relative;\">Using Middleware to Enable Async Logic<a href=\"#using-middleware-to-enable-async-logic\" aria-label=\"using middleware to enable async logic permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Redux store는 비동기 로직에 대해 아무것도 모릅니다.</p>\n<p>동작을 동기식으로 전달하고, root reducer 함수를 호출하여 상태를 업데이트하고, 무언가 변경되었음을 UI에 알리는 방법만 알고 있습니다.</p>\n<p><strong>모든 비동기성은 저장소 외부에서 발생해야 합니다.</strong></p>\n<p>하지만 현재 store 상태를 dispatch 하거나 확인하여 비동기 로직이 store와 상호 작용하도록 하려면 어떻게 해야 할까요?</p>\n<p>그것이 바로 middleware가 들어오는 곳입니다.</p>\n<p>middleware는 store를 확장하고 아래와 같은 일을 합니다.</p>\n<ul>\n<li>\n<p>action이 dispatch될 때 추가 logic 실행</p>\n</li>\n<li>\n<p>dispatch된 action 일시 중지, 수정, 딜레이, 교체 또는 중단</p>\n</li>\n<li>\n<p>dispatch 및 getState에 접근할 수 있는 추가 코드 작성</p>\n</li>\n<li>\n<p>함수 및 promise외 같은 일반 action objects 이외의 다른 값을 intercepting 해서 dispatch에 다른 값을 넣습니다.</p>\n</li>\n</ul>\n<p>Redux에는 여러 종류의 비동기 middleware가 있으며 각각 다른 구문을 사용하여 logic을 작성할 수 있습니다.</p>\n<p>가장 일반적인 비동기 middleware는 다음과 같습니다.</p>\n<ul>\n<li>\n<p>redux-thunk: 비동기 로직을 ​​직접 포함하는 함수를 작성할 수 있다.</p>\n</li>\n<li>\n<p>redux-saga: 미들웨어에서 실행할 수 있도록 behavior의 descriptions을 반환하는 generator functions를 사용.</p>\n</li>\n<li>\n<p>redux-observable: RxJS observable 라이브러리를 사용하여 action을 처리하는 함수 chains을 생성.</p>\n</li>\n</ul>\n<p>이러한 각 라이브러리에는 서로 다른 사용 사례와 장단점이 있습니다.</p>\n<p>💁🏻‍♂️ Redux Toolkit의 RTK Query 는 Redux 앱용으로 구축된 data fetching 및 caching solution 이며 thunks / reducer를 작성할 필요가 없습니다. 직접 사용해 보고 도움이 되는지 확인해 보세요!</p>\n<p>Redux Toolkit configureStore 기능은 기본적으로 thunk 미들웨어를 자동으로 설정하므로 애플리케이션 코드의 일부로 thunk 작성을 즉시 시작할 수 있습니다.</p>\n<h4 id=\"defining-async-logic-in-slices\" style=\"position:relative;\">Defining Async Logic in Slices<a href=\"#defining-async-logic-in-slices\" aria-label=\"defining async logic in slices permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Redux Toolkit은 현재 thunk 함수 작성을 위한 특수 API 또는 구문을 제공하지 않습니다.</p>\n<p>특히 createSlice() 호출의 일부로 정의할 수 없습니다.</p>\n<p>일반 Redux 코드와 동일하게 reducer logic과 별도로 작성해야 합니다.</p>\n<p>Thunks는 일반적으로 dispatch(dataLoaded(response.data))와 같은 일반 작업을 전달합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// First, define the reducer and action creators via `createSlice`</span>\n<span class=\"token keyword\">const</span> usersSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token string\">\"idle\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">usersLoading</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Use a \"state machine\" approach for loading state instead of booleans</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">===</span> <span class=\"token string\">\"idle\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        state<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token string\">\"pending\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">usersReceived</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">===</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        state<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token string\">\"idle\"</span>\n        state<span class=\"token punctuation\">.</span>users <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Destructure and export the plain action creators</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> usersLoading<span class=\"token punctuation\">,</span> usersReceived <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> usersSlice<span class=\"token punctuation\">.</span>actions\n\n<span class=\"token comment\">// Define a thunk that dispatches those action creators</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchUsers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">dispatch</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">usersLoading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> usersAPI<span class=\"token punctuation\">.</span><span class=\"token function\">fetchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">usersReceived</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"redux-data-fetching-patterns\" style=\"position:relative;\">Redux Data Fetching Patterns<a href=\"#redux-data-fetching-patterns\" aria-label=\"redux data fetching patterns permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Redux의 Data fetching logic는 일반적으로 <code class=\"language-text\">predictable pattern</code>을 따릅니다.</p>\n<ul>\n<li>\n<p>request가 진행 중임을 나타내기 위해 request 전에 “start” action이 dispatch 됩니다.</p>\n<blockquote>\n<p>이는 로딩 상태를 추적하거나, 중복 request을 건너뛰거나, UI에 로딩 표시기를 표시하는 데 사용할 수 있습니다.</p>\n</blockquote>\n</li>\n<li>\n<p>비동기 요청이 이루어집니다.</p>\n</li>\n<li>\n<p>요청 결과에 따라 비동기 logic은 결과 데이터가 포함된 “success” or 오류 세부 정보가 포함된 “failure”를 dispatch 합니다. reducer는 두 경우 모두 로딩 상태를 지우고 성공 사례의 결과 데이터를 처리하거나 표시를 위해 오류 값을 저장합니다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getRepoDetailsStarted</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"repoDetails/fetchStarted\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getRepoDetailsSuccess</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">repoDetails</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"repoDetails/fetchSucceeded\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> repoDetails<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getRepoDetailsFailed</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"repoDetails/fetchFailed\"</span><span class=\"token punctuation\">,</span>\n  error<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchIssuesCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">org<span class=\"token punctuation\">,</span> repo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">dispatch</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRepoDetailsStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> repoDetails <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getRepoDetails</span><span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">,</span> repo<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRepoDetailsSuccess</span><span class=\"token punctuation\">(</span>repoDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRepoDetailsFailed</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러나 이 방법을 사용하여 코드를 작성하는 것은 지루한 작업입니다.</p>\n<p>각각의 개별 요청은 유사한 구현을 반복해야 합니다.</p>\n<p>하지만 <code class=\"language-text\">createAsyncThunk</code>는 action type 및 action creator를 생성하고 해당 action을 dispatch하는 thunk를 생성하여 이 패턴을 추상화합니다.</p>\n<h4 id=\"async-requests-with-createasyncthunk\" style=\"position:relative;\">Async Requests with createAsyncThunk<a href=\"#async-requests-with-createasyncthunk\" aria-label=\"async requests with createasyncthunk permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>개발자는 API 요청에 필요한 실제 logic, Redux action history log에 표시되는 action type 이름, reducer가 가져온 데이터를 처리하는 방법에 가장 관심이 있을 것입니다.</p>\n<p>여러 action type을 정의하고 작업을 올바른 순서로 dispatch 하는 반복적인 세부 사항은 관심이 없을 것입니다.</p>\n<p><code class=\"language-text\">createAsyncThunk</code>는 이 프로세스를 단순화합니다.</p>\n<p>개발자는 오직 action type prefix의 문자열과 실제 비동기 논리를 수행하고 결과와 함께 Promise를 반환하는 payload 생성자 콜백만 제공하면 됩니다.</p>\n<p>그 대가로 createAsyncThunk는 사용자가 반환한 Promise와 reducer에서 처리할 수 있는 action type에 따라 올바른 작업을 dispatch하는 thunk를 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createAsyncThunk<span class=\"token punctuation\">,</span> createSlice <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> userAPI <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./userAPI\"</span>\n\n<span class=\"token comment\">// First, create the thunk</span>\n<span class=\"token keyword\">const</span> fetchUserById <span class=\"token operator\">=</span> <span class=\"token function\">createAsyncThunk</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"users/fetchByIdStatus\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">userId<span class=\"token punctuation\">,</span> thunkAPI</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">fetchById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Then, handle actions in your reducers:</span>\n<span class=\"token keyword\">const</span> usersSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">entities</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token string\">\"idle\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// standard reducer logic, with auto-generated action types per reducer</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">extraReducers</span><span class=\"token operator\">:</span> <span class=\"token parameter\">builder</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Add reducers for additional action types here, and handle loading state as needed</span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>fetchUserById<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Add user to the state array</span>\n      state<span class=\"token punctuation\">.</span>entities<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Later, dispatch the thunk as needed in the app</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchUserById</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>thunk action creator는 payload에 대한 첫 번째 인수로 전달될 단일 arg를 허용합니다.</p>\n<p>payload creator는 자동 생성된 고유한 무작위 요청 ID 문자열 및 AbortController.signal 객체뿐만 아니라 일반적으로 표준 Redux 썽크 함수에 전달되는 매개변수를 포함하는 thunkAPI 객체도 수신합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ThunkAPI</span> <span class=\"token punctuation\">{</span>\n  dispatch<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span>\n  getState<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span>\n  extra<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n  requestId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  signal<span class=\"token operator\">:</span> AbortSignal\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"managing-normalized-data\" style=\"position:relative;\">Managing Normalized Data<a href=\"#managing-normalized-data\" aria-label=\"managing normalized data permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>대부분의 애플리케이션은 일반적으로 깊게 nested 되거나 relational인 데이터를 처리합니다.</p>\n<p>데이터 normalizing의 목표는 state에서 데이터를 효율적으로 구성하는 것입니다.</p>\n<p>이것은 일반적으로 id의 키가 있는 개체로 저장하고 해당 id의 정렬된 배열을 저장하여 수행됩니다.</p>\n<h4 id=\"normalizing-by-hand\" style=\"position:relative;\">Normalizing by hand<a href=\"#normalizing-by-hand\" aria-label=\"normalizing by hand permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">first_name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"normalized\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">last_name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"person\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음은 데이터를 반환하는 fetchAll API 요청의 응답을 정규화하는 방법에 대한 기본적인 예입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSlice<span class=\"token punctuation\">,</span> createAsyncThunk <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token keyword\">import</span> userAPI <span class=\"token keyword\">from</span> <span class=\"token string\">\"./userAPI\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> fetchUsers <span class=\"token operator\">=</span> <span class=\"token function\">createAsyncThunk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users/fetchAll\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">fetchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> slice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">ids</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">entities</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">extraReducers</span><span class=\"token operator\">:</span> <span class=\"token parameter\">builder</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>fetchUsers<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// reduce the collection by the id property into a shape of { 1: { ...user }}</span>\n      <span class=\"token keyword\">const</span> byId <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">byId<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        byId<span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user\n        <span class=\"token keyword\">return</span> byId\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      state<span class=\"token punctuation\">.</span>entities <span class=\"token operator\">=</span> byId\n      state<span class=\"token punctuation\">.</span>ids <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>byId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>우리는 이 코드를 작성할 수 있지만 특히 여러 유형의 데이터를 처리하는 경우 반복됩니다.</p>\n<p>또한 이 예제에서는 항목을 업데이트하지 않고 상태로 로드하는 것만 처리합니다.</p>\n<h4 id=\"normalizing-with-normalizr\" style=\"position:relative;\">Normalizing with normalizr<a href=\"#normalizing-with-normalizr\" aria-label=\"normalizing with normalizr permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>normalizr는 데이터 normalizing를 위한 인기 있는 기존 라이브러리입니다.</p>\n<p>Redux 없이도 단독으로 사용할 수 있지만 Redux와 함께 매우 일반적으로 사용됩니다.</p>\n<p>일반적인 사용법은 API 응답에서 컬렉션의 형식을 지정한 다음 reducer에서 처리하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSlice<span class=\"token punctuation\">,</span> createAsyncThunk <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> normalize<span class=\"token punctuation\">,</span> schema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"normalizr\"</span>\n\n<span class=\"token keyword\">import</span> userAPI <span class=\"token keyword\">from</span> <span class=\"token string\">\"./userAPI\"</span>\n\n<span class=\"token keyword\">const</span> userEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Entity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> fetchUsers <span class=\"token operator\">=</span> <span class=\"token function\">createAsyncThunk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users/fetchAll\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">fetchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// Normalize the data before passing it to our reducer</span>\n  <span class=\"token keyword\">const</span> normalized <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>userEntity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> normalized<span class=\"token punctuation\">.</span>entities\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> slice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">ids</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">entities</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">extraReducers</span><span class=\"token operator\">:</span> <span class=\"token parameter\">builder</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>fetchUsers<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>entities <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>users\n      state<span class=\"token punctuation\">.</span>ids <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 코드는 상태에 추가 항목을 추가하거나 나중에 업데이트하는 것을 처리하지 않습니다.</p>\n<p>수신된 모든 항목을 로드하기만 합니다.</p>\n<h4 id=\"normalizing-with-createentityadapter\" style=\"position:relative;\">Normalizing with createEntityAdapter<a href=\"#normalizing-with-createentityadapter\" aria-label=\"normalizing with createentityadapter permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Redux Toolkit의 <code class=\"language-text\">createEntityAdapter</code> API는 컬렉션을 가져와</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  ids: [],\n  entities: {}\n}</code></pre></div>\n<p>형태로 배치하여 슬라이스에 데이터를 저장하는 표준화된 방법을 제공합니다.</p>\n<p>이 사전 정의된 상태 모양과 함께 데이터 작업 방법을 알고 있는 reducer 및 selectors를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  createSlice<span class=\"token punctuation\">,</span>\n  createAsyncThunk<span class=\"token punctuation\">,</span>\n  createEntityAdapter<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token keyword\">import</span> userAPI <span class=\"token keyword\">from</span> <span class=\"token string\">\"./userAPI\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> fetchUsers <span class=\"token operator\">=</span> <span class=\"token function\">createAsyncThunk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users/fetchAll\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">fetchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// In this case, `response.data` would be:</span>\n  <span class=\"token comment\">// [{id: 1, first_name: 'Example', last_name: 'User'}]</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> updateUser <span class=\"token operator\">=</span> <span class=\"token function\">createAsyncThunk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users/updateOne\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// In this case, `response.data` would be:</span>\n  <span class=\"token comment\">// { id: 1, first_name: 'Example', last_name: 'UpdatedLastName'}</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> usersAdapter <span class=\"token operator\">=</span> <span class=\"token function\">createEntityAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// By default, `createEntityAdapter` gives you `{ ids: [], entities: {} }`.</span>\n<span class=\"token comment\">// If you want to track 'loading' or other keys, you would initialize them here:</span>\n<span class=\"token comment\">// `getInitialState({ loading: false, activeRequestId: null })`</span>\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> usersAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> slice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span>\n  initialState<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">removeUser</span><span class=\"token operator\">:</span> usersAdapter<span class=\"token punctuation\">.</span>removeOne<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">extraReducers</span><span class=\"token operator\">:</span> <span class=\"token parameter\">builder</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>fetchUsers<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> usersAdapter<span class=\"token punctuation\">.</span>upsertMany<span class=\"token punctuation\">)</span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>updateUser<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>changes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> payload\n      usersAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">updateOne</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> changes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> slice<span class=\"token punctuation\">.</span>reducer\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> reducer\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> removeUser <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> slice<span class=\"token punctuation\">.</span>actions</code></pre></div>\n<h4 id=\"using-createentityadapter-with-normalization-libraries\" style=\"position:relative;\">Using createEntityAdapter with Normalization Libraries<a href=\"#using-createentityadapter-with-normalization-libraries\" aria-label=\"using createentityadapter with normalization libraries permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>이미 normalizr 또는 다른 정규화 라이브러리를 사용하고 있다면 createEntityAdapter와 함께 사용하는 것을 고려할 수 있습니다.</p>\n<p>위의 예를 확장하기 위해 다음은 normalizr를 사용하여 payload를 포맷한 다음 createEntityAdapter가 제공하는 유틸리티를 활용하는 방법에 대한 데모입니다.</p>\n<p>기본적으로 setAll, addMany 및 upsertMany CRUD 메서드에는 엔터티 배열이 필요합니다.</p>\n<p>그러나 { 1: { id: 1, … }} 모양의 개체를 대안으로 전달할 수도 있으므로 사전 정규화된 데이터를 더 쉽게 삽입할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// features/articles/articlesSlice.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  createSlice<span class=\"token punctuation\">,</span>\n  createEntityAdapter<span class=\"token punctuation\">,</span>\n  createAsyncThunk<span class=\"token punctuation\">,</span>\n  createSelector<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token keyword\">import</span> fakeAPI <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../services/fakeAPI\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> normalize<span class=\"token punctuation\">,</span> schema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"normalizr\"</span>\n\n<span class=\"token comment\">// Define normalizr entity schemas</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> userEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Entity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> commentEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Entity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comments\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">commenter</span><span class=\"token operator\">:</span> userEntity<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> articleEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Entity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"articles\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> userEntity<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>commentEntity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> articlesAdapter <span class=\"token operator\">=</span> <span class=\"token function\">createEntityAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> fetchArticle <span class=\"token operator\">=</span> <span class=\"token function\">createAsyncThunk</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"articles/fetchArticle\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fakeAPI<span class=\"token punctuation\">.</span>articles<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Normalize the data so reducers can load a predictable payload, like:</span>\n    <span class=\"token comment\">// `action.payload = { users: {}, articles: {}, comments: {} }`</span>\n    <span class=\"token keyword\">const</span> normalized <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> articleEntity<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> normalized<span class=\"token punctuation\">.</span>entities\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> slice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"articles\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> articlesAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">extraReducers</span><span class=\"token operator\">:</span> <span class=\"token parameter\">builder</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>fetchArticle<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Handle the fetch result by inserting the articles here</span>\n      articlesAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">upsertMany</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>articles<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> slice<span class=\"token punctuation\">.</span>reducer\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> reducer</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// features/users/usersSlice.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSlice<span class=\"token punctuation\">,</span> createEntityAdapter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fetchArticle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../articles/articlesSlice\"</span>\n\n<span class=\"token keyword\">const</span> usersAdapter <span class=\"token operator\">=</span> <span class=\"token function\">createEntityAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> slice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> usersAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">extraReducers</span><span class=\"token operator\">:</span> <span class=\"token parameter\">builder</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>fetchArticle<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// And handle the same fetch result by inserting the users here</span>\n      usersAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">upsertMany</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> slice<span class=\"token punctuation\">.</span>reducer\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> reducer</code></pre></div>\n<hr>\n<h2 id=\"usage-with-typescript\" style=\"position:relative;\">Usage With TypeScript<a href=\"#usage-with-typescript\" aria-label=\"usage with typescript permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"introduction\" style=\"position:relative;\">Introduction<a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Redux Toolkit은 TypeScript로 작성되었으며 해당 API는 TypeScript 애플리케이션과의 뛰어난 통합이 가능하도록 설계되었습니다.</p>\n<p>이 페이지에서는 Redux Toolkit에 포함된 다양한 API 각각에 대한 구체적인 세부 정보와 TypeScript로 API를 올바르게 입력하는 방법을 제공합니다.</p>\n<h3 id=\"configurestore\" style=\"position:relative;\">configureStore<a href=\"#configurestore\" aria-label=\"configurestore permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h4 id=\"getting-the-state-type\" style=\"position:relative;\">Getting the State type<a href=\"#getting-the-state-type\" aria-label=\"getting the state type permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>State type을 얻는 가장 쉬운 방법은 미리 root reducer를 정의하고 ReturnType을 추출하는 것입니다.</p>\n<p>type name State는 일반적으로 많이 사용되므로 혼동을 방지하기 위해 type에 RootState와 같은 다른 이름을 지정하는 것이 좋습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> type RootState <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> rootReducer<span class=\"token operator\">></span></code></pre></div>\n<p>또는 rootReducer를 직접 생성하지 않고 대신 slice reducers를 configureStore()에 직접 전달하는 경우 root reducer를 올바르게 유추하기 위해 입력을 약간 수정해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">one</span><span class=\"token operator\">:</span> oneSlice<span class=\"token punctuation\">.</span>reducer<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">two</span><span class=\"token operator\">:</span> twoSlice<span class=\"token punctuation\">.</span>reducer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> type RootState <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store</code></pre></div>\n<p>reducer를 configureStore()에 직접 전달하고 루트 reducer를 명시적으로 정의하지 않으면 rootReducer에 대한 참조가 없습니다. 대신 State 유형을 가져오기 위해 store.getState를 참조할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./rootReducer\"</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> rootReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> type RootState <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"getting-the-dispatch-type\" style=\"position:relative;\">Getting the Dispatch type<a href=\"#getting-the-dispatch-type\" aria-label=\"getting the dispatch type permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>store에서 Dispatch type을 get하려면 store를 생성 후 추출할 수 있습니다.</p>\n<p>type name Dispatch는 일반적으로 과도하게 사용되므로 혼동을 방지하기 위해 유형에 AppDispatch와 같은 다른 이름을 지정하는 것이 좋습니다. 또한 아래에 표시된 useAppDispatch와 같은 hook를 내보낸 다음 useDispatch를 호출할 때마다 사용하는 것이 더 편리할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span>\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./rootReducer\"</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> rootReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> type AppDispatch <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> store<span class=\"token punctuation\">.</span>dispatch\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useAppDispatch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> AppDispatch <span class=\"token operator\">=</span> useDispatch <span class=\"token comment\">// Export a hook that can be reused to resolve types</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store</code></pre></div>\n<h4 id=\"correct-typings-for-the-dispatch-type\" style=\"position:relative;\">Correct typings for the Dispatch type<a href=\"#correct-typings-for-the-dispatch-type\" aria-label=\"correct typings for the dispatch type permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>dispatch 함수 type은 middleware 옵션에서 추론됩니다. 따라서 올바르게 입력된 middleware를 추가하면 디스패치가 이미 올바르게 입력되어 있어야 합니다.</p>\n<p>TypeScript는 스프레드 연산자를 사용하여 배열을 결합할 때 종종 배열 type을 넓히므로 getDefaultMiddleware()에서 반환된 MiddlewareArray의 .concat(…) 및 .prepend(…) 메서드를 사용하는 것이 좋습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@reduxjs/toolkit'</span>\n<span class=\"token keyword\">import</span> additionalMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">'additional-middleware'</span>\n<span class=\"token keyword\">import</span> logger <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-logger'</span>\n<span class=\"token comment\">// @ts-ignore</span>\n<span class=\"token keyword\">import</span> untypedMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">'untyped-middleware'</span>\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./rootReducer'</span>\n\n<span class=\"token keyword\">export</span> type RootState <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> rootReducer<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> rootReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">middleware</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">getDefaultMiddleware</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">getDefaultMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// correctly typed middlewares can just be used</span>\n        additionalMiddleware<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// you can also type middlewares manually</span>\n        untypedMiddleware <span class=\"token keyword\">as</span> Middleware<span class=\"token operator\">&lt;</span>\n          <span class=\"token punctuation\">(</span>action<span class=\"token operator\">:</span> Action<span class=\"token operator\">&lt;</span><span class=\"token string\">'specialAction'</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> number<span class=\"token punctuation\">,</span>\n          RootState\n        <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// prepend and concat calls can be chained</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> type AppDispatch <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> store<span class=\"token punctuation\">.</span>dispatch\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store</code></pre></div>\n<p><strong>getDefaultMiddleware 없이 MiddlewareArray 사용</strong></p>\n<p>getDefaultMiddleware의 사용을 모두 건너뛰고 싶다면 미들웨어 array의 type-safe 연결을 위해 MiddlewareArray를 계속 사용할 수 있습니다. 이 클래스는 .concat(…) 및 추가 .prepend(…) 메서드에 대한 수정된 유형으로만 기본 JavaScript 배열 유형을 확장합니다.</p>\n<p>const로 사용하고 스프레드 연산자를 사용하지 않는 한 배열 유형 확장 문제가 발생하지 않을 것이므로 일반적으로 필요하지 않습니다.</p>\n<p>따라서 다음 두 호출은 동일합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore<span class=\"token punctuation\">,</span> MiddlewareArray <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@reduxjs/toolkit'</span>\n\n<span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> rootReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">middleware</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiddlewareArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>additionalMiddleware<span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> rootReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">middleware</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>additionalMiddleware<span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"using-the-extracted-dispatch-type-with-react-redux\" style=\"position:relative;\">Using the extracted Dispatch type with React Redux<a href=\"#using-the-extracted-dispatch-type-with-react-redux\" aria-label=\"using the extracted dispatch type with react redux permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>기본적으로 React Redux useDispatch hook에는 미들웨어를 고려하는 type이 포함되어 있지 않습니다.</p>\n<p>dispatch할 때 dispatch 함수에 대해 더 구체적인 type이 필요한 경우 반환된 dispatch 함수의 type을 지정하거나 useSelector의 custom-typed 버전을 만들 수 있습니다. <a href=\"https://react-redux.js.org/using-react-redux/usage-with-typescript#typing-the-usedispatch-hook\">자세한 내용은 React Redux 문서를 참조하세요</a>.</p>\n<h3 id=\"createaction\" style=\"position:relative;\">createAction<a href=\"#createaction\" aria-label=\"createaction permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>대부분의 사용 사례에서 action.type의 리터럴 정의가 필요하지 않으므로 다음을 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">createAction <span class=\"token operator\">&lt;</span> number <span class=\"token operator\">></span> <span class=\"token string\">\"test\"</span></code></pre></div>\n<p>그러면 생성된 action이 PayloadActionCreator&#x3C;숫자, 문자열> type이 됩니다.</p>\n<p>일부 설정에서는 action.type에 대한 리터럴 유형이 필요합니다.</p>\n<p>하지만 불행하게도 TypeScript type 정의는 수동으로 정의된 유형 매개변수와 유추된 유형 매개변수의 혼합을 허용하지 않으므로 Generic 정의와 실제 JavaScript 코드 모두에서 유형을 지정해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">createAction <span class=\"token operator\">&lt;</span> number<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span> <span class=\"token operator\">></span> <span class=\"token string\">\"test\"</span></code></pre></div>\n<p>중복 없이 작성하는 다른 방법을 찾고 있다면 prepare callback을 사용하여 두 type parameters가 arguments에서 추론될 수 있으므로 action type을 지정할 필요가 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> withPayloadType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">t</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> withPayloadType<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"alternative-to-using-a-literally-typed-actiontype\" style=\"position:relative;\">Alternative to using a literally-typed action.type<a href=\"#alternative-to-using-a-literally-typed-actiontype\" aria-label=\"alternative to using a literally typed actiontype permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>예를 들어 case 문에 payload를 올바르게 입력하기 위해 action.type을 식별자로 사용하는 경우 다음 대안에 관심을 가질 수 있습니다.</p>\n<p>생성된 action creators에는 type predicate 역할을 하는 match method가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> increment <span class=\"token operator\">=</span> createAction <span class=\"token operator\">&lt;</span> number <span class=\"token operator\">></span> <span class=\"token string\">\"increment\"</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> Action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>increment<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// action.payload inferred correctly here</span>\n    action<span class=\"token punctuation\">.</span>payload\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"createreducer\" style=\"position:relative;\">createReducer<a href=\"#createreducer\" aria-label=\"createreducer permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>createReducer를 호출하는 기본 방법은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> PayloadAction<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state <span class=\"token operator\">+</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>안타깝게도 key는 문자열일 뿐이므로 해당 API TypeScript를 사용하면 action type을 유추하거나 확인할 수 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> increment <span class=\"token operator\">=</span> createAction<span class=\"token operator\">&lt;</span>number<span class=\"token punctuation\">,</span> <span class=\"token string\">'increment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> decrement <span class=\"token operator\">=</span> createAction<span class=\"token operator\">&lt;</span>number<span class=\"token punctuation\">,</span> <span class=\"token string\">'decrement'</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'decrement'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>increment<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// action is any here</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>decrement<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> PayloadAction<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// even though action should actually be PayloadAction&lt;number>, TypeScript can't detect that and won't give a warning here.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"building-type-safe-reducer-argument-objects\" style=\"position:relative;\">Building Type-Safe Reducer Argument Objects<a href=\"#building-type-safe-reducer-argument-objects\" aria-label=\"building type safe reducer argument objects permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>간단한 객체를 createReducer에 대한 인수로 사용하는 대신 ActionReducerMapBuilder 인스턴스를 수신하는 콜백을 사용할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> increment <span class=\"token operator\">=</span> createAction<span class=\"token operator\">&lt;</span>number<span class=\"token punctuation\">,</span> <span class=\"token string\">'increment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> decrement <span class=\"token operator\">=</span> createAction<span class=\"token operator\">&lt;</span>number<span class=\"token punctuation\">,</span> <span class=\"token string\">'decrement'</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'decrement'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">builder</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  builder\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>increment<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// action is inferred correctly here</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>decrement<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> PayloadAction<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// this would error out</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>reducer argument objects를 정의할 때 더 엄격한 안전성이 필요한 경우 이 API를 사용하는 것이 좋습니다.</p>\n<p><strong>Typing builder.addMatcher</strong></p>\n<p>builder.addMatcher에 대한 첫 번째 matcher argument로 type predicate 함수를 사용해야 합니다.</p>\n<p>결과적으로 두 번째 reducer argument에 대한 action argument는 TypeScript에서 유추할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isNumberValueAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> AnyAction</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> action is PayloadAction<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">builder</span> <span class=\"token operator\">=></span>\n   builder<span class=\"token punctuation\">.</span><span class=\"token function\">addMatcher</span><span class=\"token punctuation\">(</span>isNumberValueAction<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>value\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"createslice\" style=\"position:relative;\">createSlice<a href=\"#createslice\" aria-label=\"createslice permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<hr>\n<h2 id=\"store-setup-1\" style=\"position:relative;\">Store Setup<a href=\"#store-setup-1\" aria-label=\"store setup 1 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"configurestore-1\" style=\"position:relative;\">configureStore<a href=\"#configurestore-1\" aria-label=\"configurestore 1 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h4 id=\"parameters\" style=\"position:relative;\">Parameters<a href=\"#parameters\" aria-label=\"parameters permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>configureStore는 아래의 옵션과 함께 단일 config object parameter를 허용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type <span class=\"token function-variable function\">ConfigureEnhancersCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">defaultEnhancers</span><span class=\"token operator\">:</span> StoreEnhancer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> StoreEnhancer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ConfigureStoreOptions</span><span class=\"token operator\">&lt;</span>\n  <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> any<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Action</span> <span class=\"token operator\">=</span> AnyAction<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">M</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Middlewares</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> Middlewares<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span>\n<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * A single reducer function that will be used as the root reducer, or an\n   * object of slice reducers that will be passed to `combineReducers()`.\n   */</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> Reducer<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> ReducersMapObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span>\n\n  <span class=\"token comment\">/**\n   * An array of Redux middleware to install. If not supplied, defaults to\n   * the set of middleware returned by `getDefaultMiddleware()`.\n   */</span>\n  middleware<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">getDefaultMiddleware</span><span class=\"token operator\">:</span> CurriedGetDefaultMiddleware<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token constant\">M</span>\n\n  <span class=\"token comment\">/**\n   * Whether to enable Redux DevTools integration. Defaults to `true`.\n   *\n   * Additional configuration can be done by passing Redux DevTools options\n   */</span>\n  devTools<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">|</span> DevToolsOptions\n\n  <span class=\"token comment\">/**\n   * The initial state, same as Redux's createStore.\n   * You may optionally specify it to hydrate the state\n   * from the server in universal apps, or to restore a previously serialized\n   * user session. If you use `combineReducers()` to produce the root reducer\n   * function (either directly or indirectly by passing an object as `reducer`),\n   * this must be an object with the same shape as the reducer map keys.\n   */</span>\n  preloadedState<span class=\"token operator\">?</span><span class=\"token operator\">:</span> DeepPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">S</span> <span class=\"token operator\">:</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span>\n\n  <span class=\"token comment\">/**\n   * The store enhancers to apply. See Redux's `createStore()`.\n   * All enhancers will be included before the DevTools Extension enhancer.\n   * If you need to customize the order of enhancers, supply a callback\n   * function that will receive the original array (ie, `[applyMiddleware]`),\n   * and should return a new array (such as `[applyMiddleware, offline]`).\n   * If you only need to add middleware, you can use the `middleware` parameter instead.\n   */</span>\n  enhancers<span class=\"token operator\">?</span><span class=\"token operator\">:</span> StoreEnhancer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> ConfigureEnhancersCallback\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> configureStore<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token operator\">=</span> any<span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Action</span> <span class=\"token operator\">=</span> AnyAction<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> ConfigureStoreOptions<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> EnhancedStore<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></code></pre></div>\n<h5 id=\"reducer\" style=\"position:relative;\">reducer<a href=\"#reducer\" aria-label=\"reducer permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>만약 single 함수인 경우 스토어의 root reducer로 직접 사용됩니다.</p>\n<p>{\nusers : usersReducer,\nposts : postsReducer\n}</p>\n<p>와 같은 slice reducer의 객체인 경우 configureStore는 이 객체를 Redux combineReducers 유틸리티에 전달하여 자동으로 루트 리듀서를 생성합니다.</p>\n<h5 id=\"middleware\" style=\"position:relative;\">middleware<a href=\"#middleware\" aria-label=\"middleware permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>Redux 미들웨어 함수의 optional array입니다.</p>\n<p>이 옵션이 제공되면 store에 추가하려는 모든 미들웨어 기능이 포함되어야 합니다. configureStore는 자동으로 그것들을 applyMiddleware로 전달합니다.</p>\n<p>제공되지 않으면 configureStore는 getDefaultMiddleware를 호출하고 반환하는 미들웨어 함수 배열을 사용합니다.</p>\n<h5 id=\"devtools\" style=\"position:relative;\">devTools<a href=\"#devtools\" aria-label=\"devtools permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>만약 boolean인 경우 configureStore가 Redux DevTools browser extension에 대한 지원을 자동으로 활성화해야 하는지 여부를 나타내는 데 사용됩니다.</p>\n<p>object인 경우 DevTools Extension이 활성화되고 options object가 composeWithDevtools()에 전달됩니다.</p>\n<p>기본값은 true입니다.</p>\n<h5 id=\"preloadedstate\" style=\"position:relative;\">preloadedState<a href=\"#preloadedstate\" aria-label=\"preloadedstate permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>Redux createStore 함수에 전달할 optional initial state 값입니다.</p>\n<h5 id=\"enhancers\" style=\"position:relative;\">enhancers<a href=\"#enhancers\" aria-label=\"enhancers permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>콜백 함수로 정의된 경우 DevTools Extension 없이 기존의 enhancer array로 호출되며 새로운 enhancer array을 반환해야 합니다.</p>\n<p>이는 redux-first-router 또는 redux-offline과 같이 applyMiddleware 앞에 스토어 인핸서를 추가해야 하는 경우에 주로 유용합니다.</p>\n<blockquote>\n<p>ex) Enhancers: (defaultEnhancers) => [offline, …defaultEnhancers]는 [offline, applyMiddleware, devToolsExtension]으로 최종 설정 됩니다.</p>\n</blockquote>\n<h4 id=\"usage\" style=\"position:relative;\">Usage<a href=\"#usage\" aria-label=\"usage permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// file: todos/todosReducer.ts noEmit</span>\n<span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> Reducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@reduxjs/toolkit'</span>\ndeclare <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> Reducer<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> reducer\n\n<span class=\"token comment\">// file: visibility/visibilityReducer.ts noEmit</span>\n<span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> Reducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@reduxjs/toolkit'</span>\ndeclare <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> Reducer<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> reducer\n\n<span class=\"token comment\">// file: store.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@reduxjs/toolkit'</span>\n\n<span class=\"token comment\">// We'll use redux-logger just as an example of adding another middleware</span>\n<span class=\"token keyword\">import</span> logger <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-logger'</span>\n\n<span class=\"token comment\">// And use redux-batched-subscribe as an example of adding enhancers</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> batchedSubscribe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-batched-subscribe'</span>\n\n<span class=\"token keyword\">import</span> todosReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./todos/todosReducer'</span>\n<span class=\"token keyword\">import</span> visibilityReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./visibility/visibilityReducer'</span>\n\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">todos</span><span class=\"token operator\">:</span> todosReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> visibilityReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> preloadedState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">todos</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'Eat food'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'Exercise'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">visibilityFilter</span><span class=\"token operator\">:</span> <span class=\"token string\">'SHOW_COMPLETED'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> debounceNotify <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">notify</span> <span class=\"token operator\">=></span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  reducer<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">middleware</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">getDefaultMiddleware</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getDefaultMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">devTools</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n  preloadedState<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">enhancers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">batchedSubscribe</span><span class=\"token punctuation\">(</span>debounceNotify<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// The store has been created with these options:</span>\n<span class=\"token comment\">// - The slice reducers were automatically passed to combineReducers()</span>\n<span class=\"token comment\">// - redux-thunk and redux-logger were added as middleware</span>\n<span class=\"token comment\">// - The Redux DevTools Extension is disabled for production</span>\n<span class=\"token comment\">// - The middleware, batched subscribe, and devtools enhancers were composed together</span></code></pre></div>\n<h3 id=\"getdefaultmiddleware\" style=\"position:relative;\">getDefaultMiddleware<a href=\"#getdefaultmiddleware\" aria-label=\"getdefaultmiddleware permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>미들웨어의 default list을 포함하는 array을 return 합니다.</p>\n<h4 id=\"intended-usage\" style=\"position:relative;\">Intended Usage<a href=\"#intended-usage\" aria-label=\"intended usage permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>기본적으로 configureStore는 일부 미들웨어를 Redux store 설정에 자동으로 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> rootReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Store has middleware added, because the middleware list was not customized</span></code></pre></div>\n<p>미들웨어 list을 customize 하려는 경우 다음과 같이 configureStore에 미들웨어 function 배열을 제공할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> rootReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">middleware</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>thunk<span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Store specifically has the thunk and logger middleware applied</span></code></pre></div>\n<p>그러나 미들웨어 옵션을 제공할 때 store에 추가하려는 모든 미들웨어를 정의해야 합니다.</p>\n<p>❗️ configureStore는 나열된 것 이외의 추가 미들웨어를 추가하지 않습니다.</p>\n<p>getDefaultMiddleware는 custom 미들웨어를 추가하고 싶지만 default 미들웨어도 추가하려는 경우에 유용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n\n<span class=\"token keyword\">import</span> logger <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-logger\"</span>\n\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./reducer\"</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> rootReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">middleware</span><span class=\"token operator\">:</span> <span class=\"token parameter\">getDefaultMiddleware</span> <span class=\"token operator\">=></span> <span class=\"token function\">getDefaultMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Store has all of the default middleware added, _plus_ the logger middleware</span></code></pre></div>\n<p>전개 연산자 대신 반환된 MiddlewareArray의 연결 가능한 .concat(…) 및 .prepend(…) 메서드를 사용하는 것이 좋습니다.</p>\n<p>후자가 경우에 따라 중요한 type 정보를 잃을 수 있기 때문입니다.</p>\n<h4 id=\"included-default-middleware\" style=\"position:relative;\">Included Default Middleware<a href=\"#included-default-middleware\" aria-label=\"included default middleware permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<h5 id=\"development\" style=\"position:relative;\">Development<a href=\"#development\" aria-label=\"development permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>Redux Toolkit의 목표 중 하나는 기본값을 제공하고 흔한 실수를 방지하는 것입니다.</p>\n<p>두 가지 흔한 이슈에 대한 runtime check를 제공하기 위해서 getDefaultMiddleware에는 App의 development build에 추가되는 일부 미들웨어가 포함되어 있습니다.</p>\n<ul>\n<li>Immutability check middleware</li>\n</ul>\n<p>mutations에 대한 상태 값을 깊이 비교합니다. dispatch 중 reducer의 mutations와 dispatch 사이에 발생하는 mutations를 감지할 수 있습니다. mutations가 감지되면 오류를 발생시키고 state tree에서 변이된 값이 감지된 키 경로를 나타냅니다.</p>\n<ul>\n<li>Serializability check middleware</li>\n</ul>\n<p>Redux Toolkit에서 사용하기 위해 특별히 생성된 custom 미들웨어입니다. immutable-state-invariant와 개념이 유사하지만 function, Promises, Symbols 및 other non-plain-JS-data values과 같은 직렬화할 수 없는 값에 대해 state tree와 action을 자세히 확인합니다. 직렬화할 수 없는 값이 감지되면 직렬화할 수 없는 값이 감지된 키 경로와 함께 콘솔 오류가 인쇄됩니다.</p>\n<p>이러한 개발 도구 미들웨어 외에도 기본적으로 redux-thunk가 추가되는데, 이는 thunk가 Redux의 기본 권장 미들웨어이기 때문입니다.</p>\n<h3 id=\"immutability-middleware\" style=\"position:relative;\">Immutability Middleware<a href=\"#immutability-middleware\" aria-label=\"immutability middleware permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Redux Toolkit과 함께 사용하도록 맞춤화된 미들웨어의 port입니다. 감지된 모든 mutations는 오류로 처리됩니다.</p>\n<p>이 미들웨어는 기본적으로 configureStore 및 getDefaultMiddleware에 의해 저장소에 추가됩니다.</p>\n<p>getDefaultMiddleware에 immutableCheck 값으로 전달하여 이 미들웨어의 동작을 customize 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// file: exampleSlice.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSlice <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> exampleSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">\"will track changes\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ignoredPath</span><span class=\"token operator\">:</span> <span class=\"token string\">\"single level\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ignoredNested</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">one</span><span class=\"token operator\">:</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">two</span><span class=\"token operator\">:</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> exampleSlice<span class=\"token punctuation\">.</span>reducer</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// file: store.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n\n<span class=\"token keyword\">import</span> exampleSliceReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./exampleSlice\"</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">reducer</span><span class=\"token operator\">:</span> exampleSliceReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// This replaces the original default middleware with the customized versions</span>\n  <span class=\"token function-variable function\">middleware</span><span class=\"token operator\">:</span> <span class=\"token parameter\">getDefaultMiddleware</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">getDefaultMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">immutableCheck</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">ignoredPaths</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ignoredPath\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ignoredNested.one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ignoredNested.two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"serializability-middleware\" style=\"position:relative;\">Serializability Middleware<a href=\"#serializability-middleware\" aria-label=\"serializability middleware permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>serialize 할 수 없는 값이 dispatch 된 actions에 포함되었는지 감지하는 custom middleware 입니다. 직렬화할 수 없는 값이 감지되면 콘솔에 기록됩니다.</p>\n<p>이 미들웨어는 기본적으로 configureStore 및 getDefaultMiddleware에 의해 저장소에 추가됩니다.</p>\n<p>getDefaultMiddleware의 serializableCheck 값으로 전달하여 이 middleware의 동작을 customize 할 수 있습니다.</p>\n<h4 id=\"options\" style=\"position:relative;\">Options<a href=\"#options\" aria-label=\"options permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SerializableStateInvariantMiddlewareOptions</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * The function to check if a value is considered serializable. This\n   * function is applied recursively to every value contained in the\n   * state. Defaults to `isPlain()`.\n   */</span>\n  isSerializable<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> boolean\n  <span class=\"token comment\">/**\n   * The function that will be used to retrieve entries from each\n   * value.  If unspecified, `Object.entries` will be used. Defaults\n   * to `undefined`.\n   */</span>\n  getEntries<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">/**\n   * An array of action types to ignore when checking for serializability.\n   * Defaults to []\n   */</span>\n  ignoredActions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">/**\n   * An array of dot-separated path strings or regular expressions to ignore\n   * when checking for serializability, Defaults to\n   * ['meta.arg', 'meta.baseQueryMeta']\n   */</span>\n  ignoredActionPaths<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>string <span class=\"token operator\">|</span> RegExp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">/**\n   * An array of dot-separated path strings or regular expressions to ignore\n   * when checking for serializability, Defaults to []\n   */</span>\n  ignoredPaths<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>string <span class=\"token operator\">|</span> RegExp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">/**\n   * Execution time warning threshold. If the middleware takes longer\n   * than `warnAfter` ms, a warning will be displayed in the console.\n   * Defaults to 32ms.\n   */</span>\n  warnAfter<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number\n\n  <span class=\"token comment\">/**\n   * Opt out of checking state. When set to `true`, other state-related params will be ignored.\n   */</span>\n  ignoreState<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean\n\n  <span class=\"token comment\">/**\n   * Opt out of checking actions. When set to `true`, other action-related params will be ignored.\n   */</span>\n  ignoreActions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"exports\" style=\"position:relative;\">Exports<a href=\"#exports\" aria-label=\"exports permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> isPlainObject <span class=\"token keyword\">from</span> <span class=\"token string\">\"./isPlainObject\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isPlain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">||</span>\n    val <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">\"boolean\"</span> <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">||</span>\n    Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Iterable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"immutable\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  configureStore<span class=\"token punctuation\">,</span>\n  createSerializableStateInvariantMiddleware<span class=\"token punctuation\">,</span>\n  isPlain<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reduxjs/toolkit\"</span>\n<span class=\"token keyword\">import</span> reducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./reducer\"</span>\n\n<span class=\"token comment\">// Augment middleware to consider Immutable.JS iterables serializable</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isSerializable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  Iterable<span class=\"token punctuation\">.</span><span class=\"token function\">isIterable</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isPlain</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getEntries</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  Iterable<span class=\"token punctuation\">.</span><span class=\"token function\">isIterable</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> serializableMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">createSerializableStateInvariantMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  isSerializable<span class=\"token punctuation\">,</span>\n  getEntries<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  reducer<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">middleware</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>serializableMiddleware<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#usage-guide\">Usage Guide</a></p>\n<ul>\n<li>\n<p><a href=\"#store-setup\">Store Setup</a></p>\n<ul>\n<li><a href=\"#manual-store-setup\">Manual Store Setup</a></li>\n<li><a href=\"#simplifying-store-setup-with-configurestore\">Simplifying Store Setup with configureStore</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#writing-reducers\">Writing Reducers</a></p>\n<ul>\n<li><a href=\"#considerations-for-using-createreducer\">Considerations for Using createReducer</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#writing-action-creators\">Writing Action Creators</a></p>\n<ul>\n<li><a href=\"#defining-action-creators-with-createaction\">Defining Action Creators with createAction</a></li>\n<li><a href=\"#using-action-creators-as-action-types\">Using Action Creators as Action Types</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#creating-slices-of-state\">Creating Slices of State</a></p>\n<ul>\n<li><a href=\"#defining-functions-in-objects\">Defining Functions in Objects</a></li>\n<li><a href=\"#simplifying-slices-with-createslice\">Simplifying Slices with createSlice</a></li>\n<li><a href=\"#exporting-and-using-slices\">Exporting and Using Slices</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#asynchronous-logic-and-data-fetching\">Asynchronous Logic and Data Fetching</a></p>\n<ul>\n<li><a href=\"#using-middleware-to-enable-async-logic\">Using Middleware to Enable Async Logic</a></li>\n<li><a href=\"#defining-async-logic-in-slices\">Defining Async Logic in Slices</a></li>\n<li><a href=\"#redux-data-fetching-patterns\">Redux Data Fetching Patterns</a></li>\n<li><a href=\"#async-requests-with-createasyncthunk\">Async Requests with createAsyncThunk</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#managing-normalized-data\">Managing Normalized Data</a></p>\n<ul>\n<li><a href=\"#normalizing-by-hand\">Normalizing by hand</a></li>\n<li><a href=\"#normalizing-with-normalizr\">Normalizing with normalizr</a></li>\n<li><a href=\"#normalizing-with-createentityadapter\">Normalizing with createEntityAdapter</a></li>\n<li><a href=\"#using-createentityadapter-with-normalization-libraries\">Using createEntityAdapter with Normalization Libraries</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#usage-with-typescript\">Usage With TypeScript</a></p>\n<ul>\n<li>\n<p><a href=\"#introduction\">Introduction</a></p>\n</li>\n<li>\n<p><a href=\"#configurestore\">configureStore</a></p>\n<ul>\n<li><a href=\"#getting-the-state-type\">Getting the State type</a></li>\n<li><a href=\"#getting-the-dispatch-type\">Getting the Dispatch type</a></li>\n<li><a href=\"#correct-typings-for-the-dispatch-type\">Correct typings for the Dispatch type</a></li>\n<li><a href=\"#using-the-extracted-dispatch-type-with-react-redux\">Using the extracted Dispatch type with React Redux</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#createaction\">createAction</a></p>\n<ul>\n<li><a href=\"#alternative-to-using-a-literally-typed-actiontype\">Alternative to using a literally-typed action.type</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#createreducer\">createReducer</a></p>\n<ul>\n<li><a href=\"#building-type-safe-reducer-argument-objects\">Building Type-Safe Reducer Argument Objects</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#createslice\">createSlice</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#store-setup-1\">Store Setup</a></p>\n<ul>\n<li>\n<p><a href=\"#configurestore-1\">configureStore</a></p>\n<ul>\n<li>\n<p><a href=\"#parameters\">Parameters</a></p>\n<ul>\n<li><a href=\"#reducer\">reducer</a></li>\n<li><a href=\"#middleware\">middleware</a></li>\n<li><a href=\"#devtools\">devTools</a></li>\n<li><a href=\"#preloadedstate\">preloadedState</a></li>\n<li><a href=\"#enhancers\">enhancers</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#usage\">Usage</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#getdefaultmiddleware\">getDefaultMiddleware</a></p>\n<ul>\n<li>\n<p><a href=\"#intended-usage\">Intended Usage</a></p>\n</li>\n<li>\n<p><a href=\"#included-default-middleware\">Included Default Middleware</a></p>\n<ul>\n<li><a href=\"#development\">Development</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#immutability-middleware\">Immutability Middleware</a></p>\n</li>\n<li>\n<p><a href=\"#serializability-middleware\">Serializability Middleware</a></p>\n<ul>\n<li><a href=\"#options\">Options</a></li>\n<li><a href=\"#exports\">Exports</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Redux-toolkit 공식문서 뿌시기","date":"February 13, 2023","description":"Redux-toolkit에 대한 모든 내용을 공식문서를 보고 정리합니다.","keywords":["react","자바스크립트","javascript","공식문서","Tutorial","redux","redux-toolkit","RTK-Query"]}},"previous":{"fields":{"slug":"/electron/"},"frontmatter":{"title":"Electron 공식문서 뿌시기🗿"}},"next":null},"pageContext":{"id":"7250f432-4968-51f3-9519-919810b9487b","previousPostId":"d95cf1e6-75de-50ba-b645-b04bbc84bd9f","nextPostId":null}},"staticQueryHashes":["230163734","2664618587"],"slicesMap":{}}