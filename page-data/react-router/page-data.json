{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-router/","result":{"data":{"site":{"siteMetadata":{"title":"동수의 로그북"}},"markdownRemark":{"id":"2d291c75-c2cf-532a-8fb8-d86d74aa238c","excerpt":"들어가며 Next.js에서는 pages 폴더 기반의 라우팅을 기본으로 제공하며, dynamic route 등 편리한 기능이 많습니다. Next.js만 계속 사용하다보니 React Router에 대해 어느순간 많이 잊어버렸다는 생각이 들었습니다. 그래서 이번 기회에 React Router…","html":"<h2 id=\"들어가며\" style=\"position:relative;\">들어가며<a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"들어가며 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Next.js에서는 pages 폴더 기반의 라우팅을 기본으로 제공하며, dynamic route 등 편리한 기능이 많습니다.</p>\n<p>Next.js만 계속 사용하다보니 React Router에 대해 어느순간 많이 잊어버렸다는 생각이 들었습니다.</p>\n<p>그래서 이번 기회에 React Router에 대해 제대로 알아보고자 합니다.</p>\n<h2 id=\"feature-overview\" style=\"position:relative;\">Feature Overview<a href=\"#feature-overview\" aria-label=\"feature overview permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"client-side-routing\" style=\"position:relative;\">Client Side Routing<a href=\"#client-side-routing\" aria-label=\"client side routing permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>React Router는 “client side routing”을 가능하게 합니다.</p>\n<p>기존 웹 사이트에서 브라우저는 웹 서버에서 문서를 요청하고 CSS 및 JavaScript assets을 다운로드 및 평가하고 서버에서 보낸 HTML을 렌더링합니다.</p>\n<p>사용자가 링크를 클릭하면 새 페이지에 대한 프로세스가 다시 시작됩니다.</p>\n<p>Client side routing을 통해 앱은 서버에서 다른 문서를 다시 요청하지 않고 링크 클릭에서 URL을 업데이트할 수 있습니다. 대신 앱은 새로운 UI를 즉시 렌더링하고 fetch를 통해 데이터를 요청하여 페이지를 새로운 정보로 업데이트할 수 있습니다.</p>\n<p>이는 브라우저가 완전히 새로운 문서를 요청하거나 다음 페이지를 위해 CSS 및 JavaScript 자산을 재평가할 필요가 없기 때문에 더 빠른 사용자 경험을 가능하게 합니다. 또한 애니메이션과 같은 것으로 보다 동적인 사용자 경험을 가능하게 합니다.</p>\n<p>Router를 생성하고 Link 및 &#x3C;Form>을 사용하여 페이지에 링크/제출하면 클라이언트 측 라우팅이 활성화됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createRoot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/client\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  createBrowserRouter<span class=\"token punctuation\">,</span>\n  RouterProvider<span class=\"token punctuation\">,</span>\n  Route<span class=\"token punctuation\">,</span>\n  Link<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createBrowserRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"about\"</span><span class=\"token operator\">></span>About Us<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"about\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>About<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>RouterProvider router<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>router<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"nested-routes\" style=\"position:relative;\">Nested Routes<a href=\"#nested-routes\" aria-label=\"nested routes permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>중첩 라우팅은 URL의 세그먼트를 컴포넌트 계층 및 데이터에 연결하는 일반적인 개념입니다. React Router의 중첩된 경로는 2014년경 Ember.js의 라우팅 시스템에서 영감을 받았습니다. Ember 팀은 거의 모든 경우에 URL의 세그먼트가 다음을 결정한다는 것을 깨달았습니다.</p>\n<ul>\n<li>\n<p>페이지에서 렌더링할 레이아웃</p>\n</li>\n<li>\n<p>해당 레이아웃의 데이터 dependencies</p>\n</li>\n</ul>\n<p>React Router는 URL 세그먼트 및 데이터에 결합된 중첩 레이아웃을 생성하기 위해 API를 사용하여 이 규칙을 수용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Configure nested routes with JSX</span>\n<span class=\"token function\">createBrowserRouter</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">createRoutesFromElements</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Root <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"contact\"</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Contact <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route\n        path<span class=\"token operator\">=</span><span class=\"token string\">\"dashboard\"</span>\n        element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Dashboard <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n        loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> request <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n          <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/dashboard.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> request<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>AuthLayout <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"login\"</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Login <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span> loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>redirectIfUser<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"logout\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Or use plain objects</span>\n<span class=\"token function\">createBrowserRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Root <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"contact\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Contact <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dashboard\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Dashboard <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">loader</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> request <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n          <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/dashboard.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> request<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>AuthLayout <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"login\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Login <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> redirectIfUser<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"logout\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> logoutUser<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"dynamic-segments\" style=\"position:relative;\">Dynamic Segments<a href=\"#dynamic-segments\" aria-label=\"dynamic segments permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>URL의 세그먼트는 구문 분석되어 다양한 API에 제공되는 동적 placeholders일 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"projects/:projectId/tasks/:taskId\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// If the current location is /projects/abc/tasks/3</span>\n<span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span>Route\n  <span class=\"token comment\">// sent to loaders</span>\n  loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    params<span class=\"token punctuation\">.</span>projectId <span class=\"token comment\">// abc</span>\n    params<span class=\"token punctuation\">.</span>taskId <span class=\"token comment\">// 3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// and actions</span>\n  action<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    params<span class=\"token punctuation\">.</span>projectId <span class=\"token comment\">// abc</span>\n    params<span class=\"token punctuation\">.</span>taskId <span class=\"token comment\">// 3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Task <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// returned from `useParams`</span>\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  params<span class=\"token punctuation\">.</span>projectId <span class=\"token comment\">// abc</span>\n  params<span class=\"token punctuation\">.</span>taskId <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token function\">useMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/projects/:projectId/tasks/:taskId\"</span><span class=\"token punctuation\">)</span>\n  match<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>projectId <span class=\"token comment\">// abc</span>\n  match<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>taskId <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"ranked-route-matching\" style=\"position:relative;\">Ranked Route Matching<a href=\"#ranked-route-matching\" aria-label=\"ranked route matching permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>URL을 경로와 matching시킬 때 React Router는 세그먼트, 정적 세그먼트, 동적 세그먼트, 스플랫 등의 수에 따라 경로의 순위를 매기고 가장 구체적인 일치를 선택합니다.</p>\n<p>예를 들어 다음 두 경로를 고려하십시오.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/teams/:teamId\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/teams/new\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>이제 URL이 <a href=\"http://example.com/teams/new%EB%9D%BC%EA%B3%A0\">http://example.com/teams/new라고</a> 가정합니다.</p>\n<p>두 경로가 기술적으로 URL과 일치하더라도(new는 :teamId일 수 있음) 두 번째 경로(/teams/new)를 선택해야 한다는 것을 직관적으로 알 수 있습니다.\nReact Router의 매칭 알고리즘도 이를 알고 있습니다.</p>\n<p>순위 경로를 사용하면 경로 순서에 대해 걱정할 필요가 없습니다.</p>\n<h3 id=\"active-links\" style=\"position:relative;\">Active Links<a href=\"#active-links\" aria-label=\"active links permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>대부분의 웹 앱에는 UI 상단, 사이드바 및 종종 여러 수준에 지속적인 navigation sections이 있습니다.</p>\n<p>active navigation items의 스타일을 지정하여 사용자가 앱에서 현재 위치(isActive) 또는 이동 위치(isPending)를 알 수 있도록 &#x3C;NavLink>를 사용하면 쉽게 수행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>NavLink\n  style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> isActive<span class=\"token punctuation\">,</span> isPending <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> isActive <span class=\"token operator\">?</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"inherit\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> isActive<span class=\"token punctuation\">,</span> isPending <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> isActive <span class=\"token operator\">?</span> <span class=\"token string\">\"active\"</span> <span class=\"token operator\">:</span> isPending <span class=\"token operator\">?</span> <span class=\"token string\">\"pending\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"relative-links\" style=\"position:relative;\">Relative Links<a href=\"#relative-links\" aria-label=\"relative links permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>HTML &#x3C;a href>와 마찬가지로 &#x3C;Link to> 및 &#x3C;NavLink to>는 중첩된 경로로 상대 경로를 사용할 수 있습니다.</p>\n<p>다음 route config가 주어집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"home\"</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Home <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"project/:projectId\"</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Project <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\":taskId\"</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Task <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></code></pre></div>\n<p>다음 URL <a href=\"https://example.com/home/project/123%EC%9D%84\">https://example.com/home/project/123을</a> 생각해보세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Home<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Project <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Home<span class=\"token operator\">></span></code></pre></div>\n<p>&#x3C;Project />가 다음 링크를 렌더링하면 링크의 href가 다음과 같이 해석됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>In &#x3C;Project> /home/project/123</th>\n<th>Resolved <a href></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&#x3C;Link to=“abc”></td>\n<td>/home/project/123/abc</td>\n</tr>\n<tr>\n<td>&#x3C;Link to=”.“></td>\n<td>/home/project/123</td>\n</tr>\n<tr>\n<td>&#x3C;Link to=”..“></td>\n<td>/home</td>\n</tr>\n<tr>\n<td>&#x3C;Link to=”..” relative=“path”></td>\n<td>/home/project</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"data-loading\" style=\"position:relative;\">Data Loading<a href=\"#data-loading\" aria-label=\"data loading permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>URL 세그먼트는 일반적으로 앱의 영구 데이터에 매핑되기 때문에 React Router는 탐색 중에 data load를 시작하기 위해 data load hook을 제공합니다.</p>\n<p>중첩 경로와 결합하여 특정 URL의 여러 레이아웃에 대한 모든 데이터를 병렬로 로드할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Route\n  path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span>\n  loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> request <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// loaders can be async functions</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/user.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> request<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> user\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Root <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route\n    path<span class=\"token operator\">=</span><span class=\"token string\">\":teamId\"</span>\n    <span class=\"token comment\">// loaders understand Fetch Responses and will automatically</span>\n    <span class=\"token comment\">// unwrap the res.json(), so you can simply return a fetch</span>\n    loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/teams/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>params<span class=\"token punctuation\">.</span>teamId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Team <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route\n      path<span class=\"token operator\">=</span><span class=\"token string\">\":gameId\"</span>\n      loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// of course you can use any data store</span>\n        <span class=\"token keyword\">return</span> fakeSdk<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>gameId<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Game <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></code></pre></div>\n<p>useLoaderData를 통해 컴포넌트에서 데이터를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">useLoaderData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// data from &lt;Route path=\"/\"></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Team</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> team <span class=\"token operator\">=</span> <span class=\"token function\">useLoaderData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// data from &lt;Route path=\":teamId\"></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> game <span class=\"token operator\">=</span> <span class=\"token function\">useLoaderData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// data from &lt;Route path=\":gameId\"></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"redirects\" style=\"position:relative;\">Redirects<a href=\"#redirects\" aria-label=\"redirects permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>데이터를 load하거나 변경하는 동안 사용자를 다른 경로로 리디렉션하는 것이 일반적입니다.</p>\n<p>✅ 일반적으로 useNavigate 보다 loaders 및 actions에서 redirect를 사용하는 것이 좋습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Route\n  path<span class=\"token operator\">=</span><span class=\"token string\">\"dashboard\"</span>\n  loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fake<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// if you know you can't render the route, you can</span>\n      <span class=\"token comment\">// throw a redirect to stop executing code here,</span>\n      <span class=\"token comment\">// sending the user to a new route</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// otherwise continue</span>\n    <span class=\"token keyword\">const</span> stats <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fake<span class=\"token punctuation\">.</span><span class=\"token function\">getDashboardStats</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> stats <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"pending-navigation-ui\" style=\"position:relative;\">Pending Navigation UI<a href=\"#pending-navigation-ui\" aria-label=\"pending navigation ui permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>사용자가 앱을 탐색하면 페이지가 렌더링되기 전에 다음 페이지의 데이터가 로드됩니다.</p>\n<p>앱이 응답하지 않는 것처럼 느껴지지 않도록 이 시간 동안 사용자 피드백을 제공하는 것이 중요합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> navigation <span class=\"token operator\">=</span> <span class=\"token function\">useNavigation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>navigation<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"loading\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>GlobalSpinner <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>FakeSidebar <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Outlet <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>FakeFooter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"skeleton-ui-with-suspense\" style=\"position:relative;\">Skeleton UI with &#x3C;Suspense><a href=\"#skeleton-ui-with-suspense\" aria-label=\"skeleton ui with suspense permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>다음 페이지의 데이터를 기다리는 대신 데이터를 load하는 동안 placeholder UI가 있는 다음 화면으로 UI가 즉시 넘어가도록 데이터를 연기할 수 있습니다.</p>\n<p>defer는 promise가 아닌 요소들이 promise 인 요소들이 전부 처리될 때까지 기다리게 해줍니다.</p>\n<p>React 18버전에서의 &#x3C;Suspense>를 통해 응답이 올 때까지 기다리고 요소를 처리할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span>Route\n  path<span class=\"token operator\">=</span><span class=\"token string\">\"issue/:issueId\"</span>\n  element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Issue <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n  loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// these are promises, but *not* awaited</span>\n    <span class=\"token keyword\">const</span> comments <span class=\"token operator\">=</span> fake<span class=\"token punctuation\">.</span><span class=\"token function\">getIssueComments</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>issueId<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> history <span class=\"token operator\">=</span> fake<span class=\"token punctuation\">.</span><span class=\"token function\">getIssueHistory</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>issueId<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// the issue, however, *is* awaited</span>\n    <span class=\"token keyword\">const</span> issue <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fake<span class=\"token punctuation\">.</span><span class=\"token function\">getIssue</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>issueId<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// defer enables suspense for the un-awaited promises</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">defer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> issue<span class=\"token punctuation\">,</span> comments<span class=\"token punctuation\">,</span> history <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Issue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> issue<span class=\"token punctuation\">,</span> history<span class=\"token punctuation\">,</span> comments <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useLoaderData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>IssueDescription issue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>issue<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token punctuation\">{</span><span class=\"token comment\">/* Suspense provides the placeholder fallback */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>IssueHistorySkeleton <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* Await manages the deferred data (promise) */</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>Await resolve<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>history<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token comment\">/* this calls back when the data is resolved */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">{</span><span class=\"token parameter\">resolvedHistory</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>IssueHistory history<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>resolvedHistory<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Await<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suspense<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>IssueCommentsSkeleton <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Await resolve<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>comments<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... or you can use hooks to access the data */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>IssueComments <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Await<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suspense<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">IssueComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> comments <span class=\"token operator\">=</span> <span class=\"token function\">useAsyncValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"data-mutations\" style=\"position:relative;\">Data Mutations<a href=\"#data-mutations\" aria-label=\"data mutations permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>HTML from은 link와 마찬가지로 navigation events입니다.</p>\n<p>React Router는 클라이언트 측 라우팅을 통해 HTML From 워크플로우를 지원합니다.</p>\n<p>Form이 제출되면 일반 브라우저 navigation event가 방지되고 제출의 FormData가 포함된 본문이 포함된 요청이 생성됩니다.</p>\n<p>이 요청은 Form의 &#x3C;Form action>과 일치하는 &#x3C;Route action>으로 전송됩니다.</p>\n<p>Form 요소의 name props가 action에 제출됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Form action<span class=\"token operator\">=</span><span class=\"token string\">\"/project/new\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n    Project title\n    <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n    Target Finish Date\n    <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"date\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"due\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Form<span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"busy-indicators-usenavigation\" style=\"position:relative;\">Busy Indicators (useNavigation)<a href=\"#busy-indicators-usenavigation\" aria-label=\"busy indicators usenavigation permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>라우팅 작업을 위해 Form을 제출할 때 navigation 상태에 액세스하여 busy indicators를 표시하고 fieldsets를 비활성화하는 등의 작업을 수행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">NewProjectForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> navigation <span class=\"token operator\">=</span> <span class=\"token function\">useNavigation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> busy <span class=\"token operator\">=</span> navigation<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"submitting\"</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Form action<span class=\"token operator\">=</span><span class=\"token string\">\"/project/new\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>fieldset disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>busy<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n          Project title\n          <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n          Target Finish Date\n          <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"date\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"due\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>fieldset<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>busy<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>busy <span class=\"token operator\">?</span> <span class=\"token string\">\"Creating...\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Create\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Form<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\">들어가며</a></p>\n</li>\n<li>\n<p><a href=\"#feature-overview\">Feature Overview</a></p>\n<ul>\n<li><a href=\"#client-side-routing\">Client Side Routing</a></li>\n<li><a href=\"#nested-routes\">Nested Routes</a></li>\n<li><a href=\"#dynamic-segments\">Dynamic Segments</a></li>\n<li><a href=\"#ranked-route-matching\">Ranked Route Matching</a></li>\n<li><a href=\"#active-links\">Active Links</a></li>\n<li><a href=\"#relative-links\">Relative Links</a></li>\n<li><a href=\"#data-loading\">Data Loading</a></li>\n<li><a href=\"#redirects\">Redirects</a></li>\n<li><a href=\"#pending-navigation-ui\">Pending Navigation UI</a></li>\n<li><a href=\"#skeleton-ui-with-suspense\">Skeleton UI with &#x3C;Suspense></a></li>\n<li><a href=\"#data-mutations\">Data Mutations</a></li>\n<li><a href=\"#busy-indicators-usenavigation\">Busy Indicators (useNavigation)</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"React Router V6 제대로 알기","date":"May 14, 2023","description":"React Router의 모든 내용을 공부합니다.","keywords":["react","javascript","자바스크립트","react router"]}},"previous":{"fields":{"slug":"/csr-ssr/"},"frontmatter":{"title":"Vanilla javascript로 CSR, SSR 구현하기"}},"next":{"fields":{"slug":"/redux-saga/"},"frontmatter":{"title":"React-Saga 공식문서 번역본"}}},"pageContext":{"id":"2d291c75-c2cf-532a-8fb8-d86d74aa238c","previousPostId":"216eb13a-973e-5a29-87e7-b6db5b9935a7","nextPostId":"872c5ba1-753b-508c-9d7f-0a753e5541ef"}},"staticQueryHashes":["230163734","2664618587"],"slicesMap":{}}